<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则表达式 on 数据分析师之旅</title>
    <link>https://dengziming.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>Recent content in 正则表达式 on 数据分析师之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Mar 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dengziming.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>常用正则表达式</title>
      <link>https://dengziming.github.io/post/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      
        <description>

&lt;h2 id=&#34;正则语法&#34;&gt;正则语法&lt;/h2&gt;

&lt;p&gt;每个语言的语法不一样，大致类似。&lt;/p&gt;

&lt;h3 id=&#34;1&#34;&gt;1.&lt;/h3&gt;

&lt;h2 id=&#34;常用正则&#34;&gt;常用正则&lt;/h2&gt;

&lt;h3 id=&#34;1-nginx匹配&#34;&gt;1.nginx匹配&lt;/h3&gt;

&lt;p&gt;([^\s]+) - ([.+])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select 
&#39;([^\\s]+) - (\\[.+\\])&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释：
\转义，这里加上sql转义是两个转义。
括号括起来是一个字符集
. 代表任意字符，+代表至少一次（*为任意次，？为最多一次）&lt;/p&gt;

&lt;h3 id=&#34;2-字符串分割&#34;&gt;2.字符串分割&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT split(&#39;%180%霖易%|%180%商城%|%霖易商城%&#39;,&#39;\\|&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|代表或，如果分割需要转义。&lt;/p&gt;

&lt;h3 id=&#34;3-特殊字符替换&#34;&gt;3.特殊字符替换&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT   regexp_replace(&#39;(名字)。|得到的sssa》《？&#39;,&#39;\\(.*?\\)|[^(a-zA-Z0-9\\u2E80-\\u9FFF)]|[\\( \\)《》。，〈〉、⼂\\⼁]|\\s+|,|&amp;quot;|\&#39;&#39;,&#39;&#39;) as contact_name

-- 得到的sssa
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-scala-匹配写法&#34;&gt;4.scala 匹配写法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;val relation1_1: Regex = &amp;quot;.*(宝贝|亲爱).*&amp;quot;.r
  val relation1_2 = &amp;quot;^[老]?[爸|妈|爹|娘].*&amp;quot;.r
  val relation1_3 = &amp;quot;^(老婆|妻子|媳妇|老公|丈夫|儿子|女儿|老[头爷]子|丈母娘|丈人|婆婆|内人|内子|太太|夫人|外子|爱人).*&amp;quot;.r
  val relation2_1 = &amp;quot;^[大小二三四五六七八九十]?[哥兄弟姐妹伯叔姑婶舅姨].*&amp;quot;.r
  val relation2_2 = &amp;quot;^[爷奶].*&amp;quot;.r
  val relation2_3 = &amp;quot;^老[大二三四五六七八九十].*&amp;quot;.r
  val relation3_1 = &amp;quot;.*(先生|老板|老板娘|小姐|女士|总$|经理$).*&amp;quot;.r
  val relation4_1 = &amp;quot;.*(老师).*&amp;quot;.r
  val relation5_1 = &amp;quot;.*(同学).*&amp;quot;.r
  val relation6_1 = &amp;quot;^老.*&amp;quot;.r
  val relation7_1 = &amp;quot;.*(提额|大额|高额|白户|黑户|额度|面签|信用|消费|金融|融资|款|借|POS|套现).*&amp;quot;.r
  val relation7_2 = &amp;quot;.*(贷|中介).*&amp;quot;.r
  val relation7_3 = &amp;quot;.*(办|刷|养).*&amp;quot;.r
  val relation7_4 = &amp;quot;.*(代).*&amp;quot;.r

  def getRelationByName(name:String): Int ={

    name match {

      case relation1_1(_) =&amp;gt; 1
      case relation1_2() =&amp;gt; 1
      case relation1_3(_) =&amp;gt; if (name.contains(&amp;quot;的&amp;quot;)) 0 else 1
      case relation2_1() =&amp;gt; 2
      case relation2_2() =&amp;gt; 2
      case relation2_3() =&amp;gt; 2
      case relation3_1(_) =&amp;gt; 3
      case relation4_1(_) =&amp;gt; 4
      case relation5_1(_) =&amp;gt; 5
      case relation6_1() =&amp;gt; 6
      case relation7_1(_) =&amp;gt; 7
      case relation7_2(_) =&amp;gt; if (name.contains(&amp;quot;房&amp;quot;)) 0 else 7
      case relation7_3(_) =&amp;gt; if (name.contains(&amp;quot;卡&amp;quot;)) 7 else 0
      case relation7_4() =&amp;gt; if (name.contains(&amp;quot;办&amp;quot;)) 7 else 0
      case _ =&amp;gt; 0
    }
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
  </channel>
</rss>