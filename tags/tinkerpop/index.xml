<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tinkerpop on 数据分析师之旅</title>
    <link>https://dengziming.github.io/tags/tinkerpop/</link>
    <description>Recent content in Tinkerpop on 数据分析师之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dengziming.github.io/tags/tinkerpop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>tinkerpop源码解析1-简单例子debug</title>
      <link>https://dengziming.github.io/post/tinkerpop/tinkerpop%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%901-%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90debug/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/tinkerpop/tinkerpop%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%901-%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90debug/</guid>
      
        <description>

&lt;p&gt;tinkerpop 源码是JanusGraph 源码解析的第一步，我们需要大概有个了解。&lt;/p&gt;

&lt;h2 id=&#34;demo-编写&#34;&gt;demo 编写&lt;/h2&gt;

&lt;p&gt;我们可以直接复制来自 tinkerpop 官方的源码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {

    TinkerGraph graph = TinkerGraph.open();
    GraphTraversalSource g = graph.traversal();

    Vertex v = g.addV().property(&amp;quot;name&amp;quot;,&amp;quot;marko&amp;quot;).property(&amp;quot;nam&amp;quot;,&amp;quot;marko a. rodriguez&amp;quot;).next();

    GraphTraversal&amp;lt;Vertex, Long&amp;gt; name = g.V(v).properties(&amp;quot;name&amp;quot;).count();
    v.property(list, &amp;quot;name&amp;quot;, &amp;quot;m. a. rodriguez&amp;quot;);
    g.V(v).properties(&amp;quot;name&amp;quot;).count();
    g.V(v).properties();
    g.V(v).properties(&amp;quot;name&amp;quot;);
    g.V(v).properties(&amp;quot;name&amp;quot;).hasValue(&amp;quot;marko&amp;quot;);
    g.V(v).properties(&amp;quot;name&amp;quot;).hasValue(&amp;quot;marko&amp;quot;).property(&amp;quot;acl&amp;quot;,&amp;quot;private&amp;quot;); //
    g.V(v).properties(&amp;quot;name&amp;quot;).hasValue(&amp;quot;marko a. rodriguez&amp;quot;);
    g.V(v).properties(&amp;quot;name&amp;quot;).hasValue(&amp;quot;marko a. rodriguez&amp;quot;).property(&amp;quot;acl&amp;quot;,&amp;quot;public&amp;quot;);
    g.V(v).properties(&amp;quot;name&amp;quot;).has(&amp;quot;acl&amp;quot;,&amp;quot;public&amp;quot;).value();
    g.V(v).properties(&amp;quot;name&amp;quot;).has(&amp;quot;acl&amp;quot;,&amp;quot;public&amp;quot;).drop(); //4\
    g.V(v).properties(&amp;quot;name&amp;quot;).has(&amp;quot;acl&amp;quot;,&amp;quot;public&amp;quot;).value();
    g.V(v).properties(&amp;quot;name&amp;quot;).has(&amp;quot;acl&amp;quot;,&amp;quot;private&amp;quot;).value();
    g.V(v).properties();
    g.V(v).properties().properties(); //5\
    g.V(v).properties().property(&amp;quot;date&amp;quot;,2014) ;//6\
    g.V(v).properties().property(&amp;quot;creator&amp;quot;,&amp;quot;stephen&amp;quot;);
    g.V(v).properties().properties();
    g.V(v).properties(&amp;quot;name&amp;quot;).valueMap();
    g.V(v).property(&amp;quot;name&amp;quot;,&amp;quot;okram&amp;quot;); //7\
    g.V(v).properties(&amp;quot;name&amp;quot;);
    g.V(v).values(&amp;quot;name&amp;quot;); //8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后从第一行开始 打断点，debug。首先注意 TinkerGraph 是一个很简单的图数据库，超级简单。&lt;/p&gt;

&lt;h2 id=&#34;tinkergraph&#34;&gt;TinkerGraph&lt;/h2&gt;

&lt;p&gt;TinkerGraph.open() 方法会新建一个 TinkerGraph：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private TinkerGraph(final Configuration configuration) {
    this.configuration = configuration;
    vertexIdManager = selectIdManager(configuration, GREMLIN_TINKERGRAPH_VERTEX_ID_MANAGER, Vertex.class);
    edgeIdManager = selectIdManager(configuration, GREMLIN_TINKERGRAPH_EDGE_ID_MANAGER, Edge.class);
    vertexPropertyIdManager = selectIdManager(configuration, GREMLIN_TINKERGRAPH_VERTEX_PROPERTY_ID_MANAGER, VertexProperty.class);
    defaultVertexPropertyCardinality = VertexProperty.Cardinality.valueOf(
            configuration.getString(GREMLIN_TINKERGRAPH_DEFAULT_VERTEX_PROPERTY_CARDINALITY, VertexProperty.Cardinality.single.name()));

    graphLocation = configuration.getString(GREMLIN_TINKERGRAPH_GRAPH_LOCATION, null);
    graphFormat = configuration.getString(GREMLIN_TINKERGRAPH_GRAPH_FORMAT, null);

    if ((graphLocation != null &amp;amp;&amp;amp; null == graphFormat) || (null == graphLocation &amp;amp;&amp;amp; graphFormat != null))
        throw new IllegalStateException(String.format(&amp;quot;The %s and %s must both be specified if either is present&amp;quot;,
                GREMLIN_TINKERGRAPH_GRAPH_LOCATION, GREMLIN_TINKERGRAPH_GRAPH_FORMAT));

    if (graphLocation != null) loadGraph();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 configuration 类似一个map。然后有几个 IDManager 和其他变量赋值。&lt;/p&gt;

&lt;p&gt;然后是 GraphTraversalSource g = graph.traversal(); 这一句仅仅是 return new GraphTraversalSource(this);&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public GraphTraversalSource(final Graph graph) {
    this(graph, TraversalStrategies.GlobalCache.getStrategies(graph.getClass()));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时候我们取看一下几个特殊的类： Traversal&lt;S,E&gt; Traversal.Admin&lt;S, E&gt; 。 他们两个都是接口，而且 Admin 是继承自 Traversal。
Traversal 代表遍历，主要方法包括 next， asNext，iterator toList 等，可以看成一个迭代器，而 Admin 的主要方法和他没有什么关系。&lt;/p&gt;

&lt;p&gt;GraphTraversal&lt;S, E&gt; extends Traversal&lt;S, E&gt; , 新增加了很多和 gremlin 相关的方法。这属于 tinkerpop 的内容&lt;/p&gt;

&lt;p&gt;然后是 addVertex&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Vertex addVertex(final Object... keyValues) {
    ElementHelper.legalPropertyKeyValueArray(keyValues);
    Object idValue = vertexIdManager.convert(ElementHelper.getIdValue(keyValues).orElse(null));
    final String label = ElementHelper.getLabelValue(keyValues).orElse(Vertex.DEFAULT_LABEL);

    if (null != idValue) {
        if (this.vertices.containsKey(idValue))
            throw Exceptions.vertexWithIdAlreadyExists(idValue);
    } else {
        idValue = vertexIdManager.getNextId(this);
    }

    final Vertex vertex = new TinkerVertex(idValue, label, this);
    this.vertices.put(vertex.id(), vertex);

    ElementHelper.attachProperties(vertex, VertexProperty.Cardinality.list, keyValues);
    return vertex;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看出源码十分简单，而且 property 等方法就更简单了，所以 TinkerGraph 可以用来进行后续的分析。这样有关图操作部分就不会有理解难度。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>tinkerpop源码解析3-策略植入</title>
      <link>https://dengziming.github.io/post/tinkerpop/tinkerpop%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%903-%E7%AD%96%E7%95%A5%E6%A4%8D%E5%85%A5/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/tinkerpop/tinkerpop%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%903-%E7%AD%96%E7%95%A5%E6%A4%8D%E5%85%A5/</guid>
      
        <description>

&lt;p&gt;前面我们大概看了tinkerpop 的代码怎么一步步变成 Traversal 和 Step，然后怎么调用和执行。我们忽略了 strategy 的相关操作。&lt;/p&gt;

&lt;h2 id=&#34;官方介绍&#34;&gt;官方介绍&lt;/h2&gt;

&lt;p&gt;在查看源码之前我们尽量对她进行了解熟悉。TraversalStrategy 分析 Traversal，如果 Traversal 符合其标准尺度，则可以相应地进行改变。
strategies 在编译期执行，是 Gremlin traversal machine 编译器的基础，分为五种类型：
1. 可以直接嵌入 traversal 逻辑的 application-level 的功能（decoration）；
2. 能够更高效通过 TinkerPop3 语法表达 traversal （optimization）；
3. 能够更高效在 graph 层面表达traversal（provider optimization）；
4. 在执行 traversal 之前 一些必须的最终适配、清理、分析 (finalization)；
5. 对于当前的程序或者存储系统来说，一些不合法的操作(verification)。&lt;/p&gt;

&lt;p&gt;以 IdentityRemovalStrategy 为例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class IdentityRemovalStrategy extends AbstractTraversalStrategy&amp;lt;TraversalStrategy.OptimizationStrategy&amp;gt; implements TraversalStrategy.OptimizationStrategy {

    private static final IdentityRemovalStrategy INSTANCE = new IdentityRemovalStrategy();

    private IdentityRemovalStrategy() {
    }

    @Override
    public void apply(Traversal.Admin&amp;lt;?, ?&amp;gt; traversal) {
        if (traversal.getSteps().size() &amp;lt;= 1)
            return;

        for (IdentityStep&amp;lt;?&amp;gt; identityStep : TraversalHelper.getStepsOfClass(IdentityStep.class, traversal)) {
            if (identityStep.getLabels().isEmpty() || !(identityStep.getPreviousStep() instanceof EmptyStep)) {
                TraversalHelper.copyLabels(identityStep, identityStep.getPreviousStep(), false);
                traversal.removeStep(identityStep);
            }
        }
    }

    public static IdentityRemovalStrategy instance() {
        return INSTANCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出继承自 AbstractTraversalStrategy， 和 TraversalStrategy.OptimizationStrategy，并有一个 apply(Traversal.Admin&amp;lt;?, ?&amp;gt; traversal)  方法。
这里是直接在 traversal 中找到 identityStep 并移除。&lt;/p&gt;

&lt;h2 id=&#34;applystrategies&#34;&gt;applyStrategies&lt;/h2&gt;

&lt;p&gt;strategies 初始化的时候就放入graph 中，我们这里看看如何嵌入到查询语句。&lt;/p&gt;

&lt;p&gt;在我们调用 traversal.next() 之前，有个步骤就是 applyStrategies。在执行 traversal 之前大概是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;this = {DefaultGraphTraversal@1359} &amp;quot;[GraphStep(vertex,[1]), VertexStep(OUT,[knows],edge), EdgeVertexStep(IN), PropertiesStep([name],value)]&amp;quot;
 lastTraverser = {EmptyTraverser@1384} 
 finalEndStep = {EmptyStep@1385} 
 stepPosition = {StepPosition@1362} &amp;quot;4.0.0()&amp;quot;
 graph = {TinkerGraph@1386} &amp;quot;tinkergraph[vertices:6 edges:6]&amp;quot;
 steps = {ArrayList@1387}  size = 4
 unmodifiableSteps = {Collections$UnmodifiableRandomAccessList@1388}  size = 4
 parent = {EmptyStep@1385} 
 sideEffects = {DefaultTraversalSideEffects@1389} &amp;quot;sideEffects[size:0]&amp;quot;
 strategies = {DefaultTraversalStrategies@1361} &amp;quot;strategies[ConnectiveStrategy, IncidentToAdjacentStrategy, MatchPredicateStrategy, FilterRankingStrategy, InlineFilterStrategy, AdjacentToIncidentStrategy, RepeatUnrollStrategy, PathRetractionStrategy, CountStrategy, LazyBarrierStrategy, TinkerGraphCountStrategy, TinkerGraphStepStrategy, ProfileStrategy, StandardVerificationStrategy]&amp;quot;
 generator = null
 requirements = null
 locked = false
 bytecode = {Bytecode@1390} &amp;quot;[[], [V(1), outE(knows), inV(), values(name)]]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出是 DefaultGraphTraversal 的实体类，lastTraverser finalEndStep parent sideEffects 都是刚初始化，steps unmodifiableSteps 是4个。
然后我们执行完这个方法再来看看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;this = {DefaultGraphTraversal@1359} &amp;quot;[TinkerGraphStep(vertex,[1]), VertexStep(OUT,[knows],vertex), PropertiesStep([name],value)]&amp;quot;
 lastTraverser = {EmptyTraverser@1384} 
 finalEndStep = {PropertiesStep@1432} &amp;quot;PropertiesStep([name],value)&amp;quot;
 stepPosition = {StepPosition@1362} &amp;quot;6.0.0()&amp;quot;
 graph = {TinkerGraph@1386} &amp;quot;tinkergraph[vertices:6 edges:6]&amp;quot;
 steps = {ArrayList@1387}  size = 3
 unmodifiableSteps = {Collections$UnmodifiableRandomAccessList@1388}  size = 3
 parent = {EmptyStep@1385} 
 sideEffects = {DefaultTraversalSideEffects@1389} &amp;quot;sideEffects[size:0]&amp;quot;
 strategies = {DefaultTraversalStrategies@1361} &amp;quot;strategies[ConnectiveStrategy, IncidentToAdjacentStrategy, MatchPredicateStrategy, FilterRankingStrategy, InlineFilterStrategy, AdjacentToIncidentStrategy, RepeatUnrollStrategy, PathRetractionStrategy, CountStrategy, LazyBarrierStrategy, TinkerGraphCountStrategy, TinkerGraphStepStrategy, ProfileStrategy, StandardVerificationStrategy]&amp;quot;
 generator = null
 requirements = {Collections$UnmodifiableSet@1431}  size = 1
 locked = true
 bytecode = {Bytecode@1390} &amp;quot;[[], [V(1), outE(knows), inV(), values(name)]]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;finalEndStep 变了，stepPosition 变了，steps unmodifiableSteps 都少了一步，requirements 多了一个。然后我们还是具体看看方法执行步骤：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void applyStrategies() throws IllegalStateException {
    if (this.locked) throw Traversal.Exceptions.traversalIsLocked(); // 判断是否执行过。
    TraversalHelper.reIdSteps(this.stepPosition, this);
    this.strategies.applyStrategies(this); // 这一步循环调用 strategy 的 apply 方法。
    {
        for (final TraversalStrategy&amp;lt;?&amp;gt; traversalStrategy : this.traversalStrategies) {
            traversalStrategy.apply(traversal);
        }
    }
    boolean hasGraph = null != this.graph;
    
    // 判断 TraversalParent 的所有 globalChild 也要进行 applyStrategies
    for (int i = 0, j = this.steps.size(); i &amp;lt; j; i++) { // &amp;quot;foreach&amp;quot; can lead to ConcurrentModificationExceptions
        final Step step = this.steps.get(i);
        if (step instanceof TraversalParent) {
            for (final Traversal.Admin&amp;lt;?, ?&amp;gt; globalChild : ((TraversalParent) step).getGlobalChildren()) {
                globalChild.setStrategies(this.strategies);
                globalChild.setSideEffects(this.sideEffects);
                if (hasGraph) globalChild.setGraph(this.graph);
                globalChild.applyStrategies();
            }
            for (final Traversal.Admin&amp;lt;?, ?&amp;gt; localChild : ((TraversalParent) step).getLocalChildren()) {
                localChild.setStrategies(this.strategies);
                localChild.setSideEffects(this.sideEffects);
                if (hasGraph) localChild.setGraph(this.graph);
                localChild.applyStrategies();
            }
        }
    }
    // 得到 finalEndStep 
    this.finalEndStep = this.getEndStep();
    // finalize requirements
    if (this.getParent() instanceof EmptyStep) {
        this.requirements = null;
        this.getTraverserRequirements();
    }
    this.locked = true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;整段代码并不复杂，复杂的是每个 traversalStrategy 具体都做了什么。&lt;/p&gt;

&lt;p&gt;我们知道 tinkerpop 是一个独立的项目，里面是不带任何和 janus 相关的内容，如何会有 JanusGraphStep 呢，
其实在很多地方（例如 fill:175, Traversal (org.apache.tinkerpop.gremlin.process.traversal)）会调用 this.asAdmin().applyStrategies();
会循环调用 traversalStrategy.apply(traversal)。在 apply 方法中得到了所有的 GraphStep。然后 new JanusGraphStep ，并且替换掉原有的 step。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>tinkerpop 的 step</title>
      <link>https://dengziming.github.io/post/tinkerpop/tinkerpop%E7%9A%84step/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/tinkerpop/tinkerpop%E7%9A%84step/</guid>
      
        <description>

&lt;h2 id=&#34;一-简单调试&#34;&gt;一、简单调试&lt;/h2&gt;

&lt;p&gt;api地址： &lt;a href=&#34;http://tinkerpop.apache.org/javadocs/current/full/&#34;&gt;http://tinkerpop.apache.org/javadocs/current/full/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一步：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JanusGraph graph = JanusGraphFactory.open(&amp;quot;janusgraph-dist/src/assembly/cfilter/conf/janusgraph-berkeleyje-es.properties&amp;quot;);

GraphTraversalSource g = graph.traversal();

g.V().has(&amp;quot;name&amp;quot;, &amp;quot;saturn&amp;quot;).path();

List&amp;lt;Path&amp;gt; paths = path.toList();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一步一步看整个调用过程：&lt;/p&gt;

&lt;p&gt;进入: fill:179, Traversal (org.apache.tinkerpop.gremlin.process.traversal)&lt;/p&gt;

&lt;p&gt;fill 方法的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final Step&amp;lt;?, E&amp;gt; endStep = this.asAdmin().getEndStep();
while (true) {
    final Traverser&amp;lt;E&amp;gt; traverser = endStep.next();
    TraversalHelper.addToCollection(collection, traverser.get(), traverser.bulk());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;asAdmin 得到 endStep，有点类似 spark 的 stage 拆分后得到 shuffleMapTask。然后调用 endStep.next() 得到 traverser。&lt;/p&gt;

&lt;p&gt;这里的代码我们前面已经熟悉过了，再看一下。进入： next:128, AbstractStep (org.apache.tinkerpop.gremlin.process.traversal.step.util)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final Traverser.Admin&amp;lt;E&amp;gt; traverser = this.processNextStart();
if (null != traverser.get() &amp;amp;&amp;amp; 0 != traverser.bulk())
    return this.prepareTraversalForNextStep(traverser);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入 processNextStart:118, PathStep (org.apache.tinkerpop.gremlin.process.traversal.step.map)
&lt;code&gt;return PathProcessor.processTraverserPathLabels(super.processNextStart(), this.keepLabels);&lt;/code&gt;
可以看出调用了父类的 processNextStart 方法，&lt;/p&gt;

&lt;p&gt;进入 processNextStart:36, MapStep (org.apache.tinkerpop.gremlin.process.traversal.step.map)&lt;/p&gt;

&lt;p&gt;由于是 mapStep，所以类似 spark 的 mapPartitionsRdd ，逻辑就是得到前面的 rdd，然后执行 map 方法的逻辑。
所以这里 mapStep 也是一样，得到  starts 的 next，然后调用map。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final Traverser.Admin&amp;lt;S&amp;gt; traverser = this.starts.next();
return traverser.split(this.map(traverser), this);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入 next:50, ExpandableStepIterator (org.apache.tinkerpop.gremlin.process.traversal.step.util)，我们说过这就是对 hostStep 的一个封装。主要就是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if (this.hostStep.getPreviousStep().hasNext())
   return this.hostStep.getPreviousStep().next();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 hostStep 就是上面的 mapStep。这里有 getPreviousStep 然后 next。&lt;/p&gt;

&lt;p&gt;然后又进入到了 processNextStart:142, GraphStep (org.apache.tinkerpop.gremlin.process.traversal.step.map)，
这里的 iteratorSupplier 变量其实是在 GraphStep 或者他的子类中赋值的，所以 get 方法得到的就是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public JanusGraphStep(final GraphStep&amp;lt;S, E&amp;gt; originalStep) {
    super(originalStep.getTraversal(), originalStep.getReturnClass(), originalStep.isStartStep(), originalStep.getIds());
    originalStep.getLabels().forEach(this::addLabel);
    this.setIteratorSupplier(() -&amp;gt; {
        if (this.ids == null) {
            return Collections.emptyIterator();
        }
        else if (this.ids.length &amp;gt; 0) {
            final Graph graph = (Graph)traversal.asAdmin().getGraph().get();
            return iteratorList((Iterator)graph.vertices(this.ids));
        }
        if (hasLocalContainers.isEmpty()) {
            hasLocalContainers.put(new ArrayList&amp;lt;&amp;gt;(), new QueryInfo(new ArrayList&amp;lt;&amp;gt;(), 0, BaseQuery.NO_LIMIT));
        }
        final JanusGraphTransaction tx = JanusGraphTraversalUtil.getTx(traversal);
        final GraphCentricQuery globalQuery = buildGlobalGraphCentricQuery(tx);

        final Multimap&amp;lt;Integer, GraphCentricQuery&amp;gt; queries = ArrayListMultimap.create();
        if (globalQuery != null &amp;amp;&amp;amp; !globalQuery.getSubQuery(0).getBackendQuery().isEmpty()) {
            queries.put(0, globalQuery);
        } else {
            hasLocalContainers.entrySet().forEach(c -&amp;gt; queries.put(c.getValue().getLowLimit(), buildGraphCentricQuery(tx, c)));
        }

        final GraphCentricQueryBuilder builder = (GraphCentricQueryBuilder) tx.query();
        final List&amp;lt;Iterator&amp;lt;E&amp;gt;&amp;gt; responses = new ArrayList&amp;lt;&amp;gt;();
        queries.entries().forEach(q -&amp;gt;  executeGraphCentryQuery(builder, responses, q));

        return new MultiDistinctOrderedIterator&amp;lt;E&amp;gt;(lowLimit, highLimit, responses, orders);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这段代码，结合前面我们分析过的 GraphStep ，我们看出和图相关的 GraphStep 主要就是有一个 iteratorSupplier。因为这个step 就是为了从图拿数据。&lt;/p&gt;

&lt;p&gt;我们再看看别的 Step。&lt;/p&gt;

&lt;h2 id=&#34;简单-step-查看&#34;&gt;简单 Step 查看&lt;/h2&gt;

&lt;p&gt;其实我们查看 Step 主要就是了解 processNextStart 的行为，接下来先看几个简单的。&lt;/p&gt;

&lt;p&gt;简单的 step 一般只处理一个逻辑，类似 spark 中的 map flatMap filter 等方法。&lt;/p&gt;

&lt;h3 id=&#34;mapstep&#34;&gt;MapStep&lt;/h3&gt;

&lt;p&gt;MapStep 是抽象类，表示这个Step有很多实现，需要自己继承。processNextStart 方法就是调用 starts 的next 返回一个Traverser，然后调用 map(返回一个Traverser);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected Traverser.Admin&amp;lt;E&amp;gt; processNextStart() {
    final Traverser.Admin&amp;lt;S&amp;gt; traverser = this.starts.next();
    return traverser.split(this.map(traverser), this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MapStep 有很多的实现类，例如：PropertyKeyStep LabelStep PropertyValueStep PathStep MathStep EdgeOtherVertexStep 等，他们的 map 方法实现很简单。&lt;/p&gt;

&lt;h3 id=&#34;filterstep&#34;&gt;FilterStep&lt;/h3&gt;

&lt;p&gt;和 MapStep 类似，它的子类有 WhereStep HasStep NotStep CoinStep IsStep 等。&lt;/p&gt;

&lt;h3 id=&#34;flatmapstep&#34;&gt;FlatMapStep&lt;/h3&gt;

&lt;p&gt;和 MapStep 类似，它的子类有 EdgeVertexStep VertexStep PropertiesStep 等。&lt;/p&gt;

&lt;h3 id=&#34;aggregatestep&#34;&gt;AggregateStep&lt;/h3&gt;

&lt;p&gt;听名字是聚合的意思，应该是多个结果合并。内部有个 TraverserSet&lt;S&gt; barrier 代表所有待合并的 Traverser。&lt;/p&gt;

&lt;h3 id=&#34;groupstep&#34;&gt;GroupStep&lt;/h3&gt;

&lt;p&gt;我们可以写一段代码测试一下：g.V().group().by(T.label).next()&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;this.asAdmin().addStep(new GroupStep&amp;lt;&amp;gt;(this.asAdmin()));&lt;/li&gt;
&lt;li&gt;this.asAdmin().getEndStep()).modulateBy(token);&lt;/li&gt;
&lt;li&gt;1. new TokenTraversal(token)&lt;/li&gt;
&lt;li&gt;2. GroupStep.modulateBy(final Traversal.Admin&amp;lt;?, ?&amp;gt; kvTraversal)&lt;/li&gt;
&lt;li&gt;1. this.seed = this.reducingBiOperator.apply(this.seed, this.projectTraverser(this.starts.next()));&lt;/li&gt;
&lt;li&gt;2. GroupStep.doFinalReduction((Map&lt;K, Object&gt;) object, this.valueTraversal);&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>tinkerpop查看</title>
      <link>https://dengziming.github.io/post/tinkerpop/tinkerpop%E7%AE%97%E5%AD%90/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/tinkerpop/tinkerpop%E7%AE%97%E5%AD%90/</guid>
      
        <description>

&lt;h2 id=&#34;一-关键类&#34;&gt;一、关键类&lt;/h2&gt;

&lt;p&gt;api地址： &lt;a href=&#34;http://tinkerpop.apache.org/javadocs/current/full/&#34;&gt;http://tinkerpop.apache.org/javadocs/current/full/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;待翻译。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>tinkerpop源码解析2-查询流程debug</title>
      <link>https://dengziming.github.io/post/tinkerpop/tinkerpop%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%902-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8Bdebug/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/tinkerpop/tinkerpop%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%902-%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8Bdebug/</guid>
      
        <description>

&lt;h2 id=&#34;一-关键类&#34;&gt;一、关键类&lt;/h2&gt;

&lt;p&gt;api地址： &lt;a href=&#34;http://tinkerpop.apache.org/javadocs/current/full/&#34;&gt;http://tinkerpop.apache.org/javadocs/current/full/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;graphtraversalsource&#34;&gt;GraphTraversalSource&lt;/h3&gt;

&lt;p&gt;构造方法：
GraphTraversalSource(Graph graph)
GraphTraversalSource(Graph graph, TraversalStrategies traversalStrategies)&lt;/p&gt;

&lt;p&gt;graph.traversal() 方法返回一个 GraphTraversalSource ，我们挺好奇怎么转化为计算逻辑的，可能类似spark一样，记录操作，然后计算。但是不同的数据库怎么切换逻辑呢？&lt;/p&gt;

&lt;h3 id=&#34;graphtraversal&#34;&gt;GraphTraversal&lt;/h3&gt;

&lt;p&gt;代表了遍历，在graph中的一条路径。&lt;/p&gt;

&lt;h3 id=&#34;traverser&#34;&gt;Traverser&lt;/h3&gt;

&lt;p&gt;代表 GraphTraversal 中的对象遍历过程的当前状态&lt;/p&gt;

&lt;h2 id=&#34;二-简单调试&#34;&gt;二、简单调试&lt;/h2&gt;

&lt;p&gt;我们使用自带的一个库进行调试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;TinkerGraph graph = TinkerFactory.createModern();

GraphTraversalSource g = graph.traversal();
Object next = g.V(1).outE(&amp;quot;knows&amp;quot;).inV().values(&amp;quot;name&amp;quot;).next();

System.out.println(next.toString());


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们的断点设置在 TinkerGraph 的增删改查方法上。&lt;/p&gt;

&lt;p&gt;第一次是 &lt;code&gt;org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.addVertex(TinkerGraph.java:161)&lt;/code&gt;，这个方法的内容比较简单，得到 id label ，新建 TinkerVertex。&lt;/p&gt;

&lt;p&gt;然后是&lt;code&gt;TinkerGraph.vertices&lt;/code&gt;,完整调用信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.vertices(TinkerGraph.java:245)
org.apache.tinkerpop.gremlin.tinkergraph.process.traversal.step.sideEffect.TinkerGraphStep.vertices(TinkerGraphStep.java:85)
org.apache.tinkerpop.gremlin.tinkergraph.process.traversal.step.sideEffect.TinkerGraphStep.lambda$new$0(TinkerGraphStep.java:59)
org.apache.tinkerpop.gremlin.tinkergraph.process.traversal.step.sideEffect.TinkerGraphStep$$Lambda$23.846254484.get(Unknown Source:-1)
org.apache.tinkerpop.gremlin.process.traversal.step.map.GraphStep.processNextStart(GraphStep.java:142)
org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.hasNext(AbstractStep.java:143)
org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.next(ExpandableStepIterator.java:50)
org.apache.tinkerpop.gremlin.process.traversal.step.map.FlatMapStep.processNextStart(FlatMapStep.java:48)
org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.hasNext(AbstractStep.java:143)
org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.next(ExpandableStepIterator.java:50)
org.apache.tinkerpop.gremlin.process.traversal.step.map.FlatMapStep.processNextStart(FlatMapStep.java:48)
org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next(AbstractStep.java:128)
org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next(AbstractStep.java:38)
org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.next(DefaultTraversal.java:200)
我们的代码：Object next = g.V(1).outE(&amp;quot;knows&amp;quot;).inV().values(&amp;quot;name&amp;quot;).next();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一共出现了 TinkerGraphStep，GraphStep，AbstractStep，FlatMapStep 四类 Step，最后一个 TinkerGraphStep 是怎么出现的？按理说都是tinkerpop 的实现，其实是  TinkerGraphStepStrategy 的缘故。&lt;/p&gt;

&lt;p&gt;接下来我们吧 &lt;code&gt;Object next = g.V(1).outE(&amp;quot;knows&amp;quot;).inV().values(&amp;quot;name&amp;quot;).next();&lt;/code&gt; 拆开分析：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GraphTraversal&amp;lt;Vertex, Vertex&amp;gt; v = g.V(1);
GraphTraversal&amp;lt;Vertex, Edge&amp;gt; knows = v.outE(&amp;quot;knows&amp;quot;);
GraphTraversal&amp;lt;Vertex, Vertex&amp;gt; inV = knows.inV();
GraphTraversal&amp;lt;Vertex, Object&amp;gt; name = inV.values(&amp;quot;name&amp;quot;);
Object next = name.next();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一步我们都断点，然后查看当前 GraphTraversal 的属性，状态等。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注册  traversalStrategies ：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;traversalStrategies = {ArrayList@1426}  size = 14
 0 = {ConnectiveStrategy@1428} &amp;quot;ConnectiveStrategy&amp;quot;
 1 = {IncidentToAdjacentStrategy@1429} &amp;quot;IncidentToAdjacentStrategy&amp;quot;
 2 = {MatchPredicateStrategy@1430} &amp;quot;MatchPredicateStrategy&amp;quot;
 3 = {FilterRankingStrategy@1431} &amp;quot;FilterRankingStrategy&amp;quot;
 4 = {InlineFilterStrategy@1432} &amp;quot;InlineFilterStrategy&amp;quot;
 5 = {AdjacentToIncidentStrategy@1433} &amp;quot;AdjacentToIncidentStrategy&amp;quot;
 6 = {RepeatUnrollStrategy@1434} &amp;quot;RepeatUnrollStrategy&amp;quot;
 7 = {PathRetractionStrategy@1435} &amp;quot;PathRetractionStrategy&amp;quot;
 8 = {CountStrategy@1436} &amp;quot;CountStrategy&amp;quot;
 9 = {LazyBarrierStrategy@1437} &amp;quot;LazyBarrierStrategy&amp;quot;
 10 = {TinkerGraphCountStrategy@1438} &amp;quot;TinkerGraphCountStrategy&amp;quot;
 11 = {TinkerGraphStepStrategy@1439} &amp;quot;TinkerGraphStepStrategy&amp;quot;
 12 = {ProfileStrategy@1440} &amp;quot;ProfileStrategy&amp;quot;
 13 = {StandardVerificationStrategy@1441} &amp;quot;StandardVerificationStrategy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;g.V(id)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public GraphTraversal&amp;lt;Vertex, Vertex&amp;gt; V(final Object... vertexIds) {
    final GraphTraversalSource clone = this.clone(); // 克隆 对象
    clone.bytecode.addStep(GraphTraversal.Symbols.V, vertexIds); // 记录
    final GraphTraversal.Admin&amp;lt;Vertex, Vertex&amp;gt; traversal = new DefaultGraphTraversal&amp;lt;&amp;gt;(clone);
    {// 这里逻辑很简单，直接赋值
        this.graph = graph;
        this.strategies = traversalStrategies;
        this.bytecode = bytecode;
    }
    return traversal.addStep(new GraphStep&amp;lt;&amp;gt;(traversal, Vertex.class, true, vertexIds));
    {
    // 1. new GraphStep&amp;lt;&amp;gt;(traversal, Vertex.class, true, vertexIds)
        {
        super(traversal);// AbstractStep
        // 这一步要注意，这里的 iteratorSupplier 使用了 getGraph。如果graph 是 JanusGraph，那么就会查询 JanusGraph 的相关方法。
        this.iteratorSupplier = () -&amp;gt; (Iterator&amp;lt;E&amp;gt;) (Vertex.class.isAssignableFrom(this.returnClass) ?
             this.getTraversal().getGraph().get().vertices(this.ids) :
             this.getTraversal().getGraph().get().edges(this.ids));
        }
    
    // 2. traversal.addStep
    {
    return (GraphTraversal.Admin&amp;lt;S, E2&amp;gt;) Traversal.Admin.super.addStep((Step) step);
    {
        public &amp;lt;S2, E2&amp;gt; Traversal.Admin&amp;lt;S2, E2&amp;gt; addStep(final int index, final Step&amp;lt;?, ?&amp;gt; step) throws IllegalStateException {
        	if (this.locked) throw Exceptions.traversalIsLocked();
        	step.setId(this.stepPosition.nextXId());
        	this.steps.add(index, step); // 添加到集合
        	final Step previousStep = this.steps.size() &amp;gt; 0 &amp;amp;&amp;amp; index != 0 ? steps.get(index - 1) : null;
        	final Step nextStep = this.steps.size() &amp;gt; index + 1 ? steps.get(index + 1) : null;
        	// 设置前后依赖
        	step.setPreviousStep(null != previousStep ? previousStep : EmptyStep.instance());
        	step.setNextStep(null != nextStep ? nextStep : EmptyStep.instance());
        	if (null != previousStep) previousStep.setNextStep(step);
        	if (null != nextStep) nextStep.setPreviousStep(step);
        	step.setTraversal(this);
        	return (Traversal.Admin&amp;lt;S2, E2&amp;gt;) this;
    	}
    }
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;v.outE(&amp;ldquo;knows&amp;rdquo;);&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public default GraphTraversal&amp;lt;S, Edge&amp;gt; outE(final String... edgeLabels) {
    this.asAdmin().getBytecode().addStep(Symbols.outE, edgeLabels); // 记录
    return this.asAdmin().addStep(new VertexStep&amp;lt;&amp;gt;(this.asAdmin(), Edge.class, Direction.OUT, edgeLabels));
    {
    // 1. new VertexStep&amp;lt;&amp;gt;(this.asAdmin(), Edge.class, Direction.OUT, edgeLabels)
        {
        super(traversal);// FlatMapStep -&amp;gt; AbstractStep
        this.direction = direction;
        this.edgeLabels = edgeLabels;
        this.returnClass = returnClass;
        }
    // 2. addStep
    // 和上面一样
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;knows.inV()&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public default GraphTraversal&amp;lt;S, Vertex&amp;gt; inV() {
    this.asAdmin().getBytecode().addStep(Symbols.inV); 
    return this.asAdmin().addStep(new EdgeVertexStep(this.asAdmin(), Direction.IN));
    {
    // 1. new EdgeVertexStep(this.asAdmin(), Direction.IN)
    {
        public EdgeVertexStep(final Traversal.Admin traversal, final Direction direction) {
        super(traversal);
        this.direction = direction;
        }
    }
    // 2. 和上面一样
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;inV.values(&amp;ldquo;name&amp;rdquo;);&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public default &amp;lt;E2&amp;gt; GraphTraversal&amp;lt;S, E2&amp;gt; values(final String... propertyKeys) {
    this.asAdmin().getBytecode().addStep(Symbols.values, propertyKeys);
    return this.asAdmin().addStep(new PropertiesStep&amp;lt;&amp;gt;(this.asAdmin(), PropertyType.VALUE, propertyKeys));
    {
    // 1. new PropertiesStep&amp;lt;&amp;gt;(this.asAdmin(), PropertyType.VALUE, propertyKeys)
    {
        public PropertiesStep(final Traversal.Admin traversal, final PropertyType propertyType, final String... propertyKeys) {
        super(traversal);
        this.returnType = propertyType;
        this.propertyKeys = propertyKeys;
    	}
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;name.next();&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;next 方法类似spark中的 action，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public E next() {
    try {
        if (!this.locked) this.applyStrategies();
        if (this.lastTraverser.bulk() == 0L) // 这个判断的意义是什么。
            this.lastTraverser = this.finalEndStep.next();
        this.lastTraverser.setBulk(this.lastTraverser.bulk() - 1L);
        return this.lastTraverser.get();
    } catch (final FastNoSuchElementException e) {
        throw this.parent instanceof EmptyStep ? new NoSuchElementException() : e;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出这里调用了 this.finalEndStep.next()，有点像spark，将逻辑转到 Step 中。&lt;/p&gt;

&lt;p&gt;这个 next 方法触发了查询等操作，所以逻辑会比其他的复杂，我们可以看看几个关键步骤：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
this.applyStrategies();
this.lastTraverser = this.finalEndStep.next();
this.lastTraverser.setBulk(this.lastTraverser.bulk() - 1L);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;涉及到几个属性：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Traverser.Admin&amp;lt;E&amp;gt; lastTraverser = EmptyTraverser.instance();
private Step&amp;lt;?, E&amp;gt; finalEndStep = EmptyStep.instance();  
protected List&amp;lt;Step&amp;gt; steps = new ArrayList&amp;lt;&amp;gt;(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 applyStrategies 方法中有 &lt;code&gt;this.finalEndStep = this.getEndStep();&lt;/code&gt; 我们可以知道一个 Traversal 有很多steps，前后都有依赖关系，有一个 finalEndStep。
然后是 &lt;code&gt;this.lastTraverser = this.finalEndStep.next();&lt;/code&gt; 可以看出 step 的 next 方法很重要，返回一个 Traverser ,Traverser 能干嘛我们现在还不知道。
但是我们现在看出 Traverser 有 bulk 属性，如果 bulk &amp;gt;0 证明当前已经执行过了，每次调用 hasNext 或者 next 的时候就直接返回数据，否则需要查询。
而查询的逻辑很明显就在 &lt;code&gt;this.lastTraverser = this.finalEndStep.next();&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AbstractStep.next()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 继承自Iterator，Step.next() 返回一个 Traverser，中间涉及了查询的操作。next 实现 在 AbstractStep 中，还有两个类实现了重写。重写也会调用父类。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Traverser.Admin&amp;lt;E&amp;gt; next() {
    if (null != this.nextEnd) { // nextEnd 应该是缓存，如果不为空直接返回，否则查询。
        try {
            return this.prepareTraversalForNextStep(this.nextEnd);
        } finally {
            this.nextEnd = null;
        }
    } else {
        while (true) {
            if (Thread.interrupted()) throw new TraversalInterruptedException();
            final Traverser.Admin&amp;lt;E&amp;gt; traverser = this.processNextStart();
            if (null != traverser.get() &amp;amp;&amp;amp; 0 != traverser.bulk())
                return this.prepareTraversalForNextStep(traverser);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后调用 processNextStart()，这就是真正的逻辑发生的地方。processNextStart 在 AbstractStep 中是一个抽象方法，需要底层不同的实现。就拿我们这里的几个例子来说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 = {GraphStep@1408} &amp;quot;GraphStep(vertex,[1])&amp;quot;    GraphStep 是最原始的step，它的next 方法是从数据库拿数据。所以 会保存一个 iterator，还有个 iteratorSupplier。
1 = {VertexStep@1409} &amp;quot;VertexStep(OUT,[knows],edge)&amp;quot; 继承自 FlatMapStep，内部保存了一个 ExpandableStepIterator starts 实现 processNextStart 方法，
2 = {EdgeVertexStep@1410} &amp;quot;EdgeVertexStep(IN)&amp;quot;   和 VertexStep 一样，只是实现了自己的 flatMap 方法。
3 = {PropertiesStep@1411} &amp;quot;PropertiesStep([name],value)&amp;quot; 同上。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到这里我们稍微清楚了一点，还是有很多问题， FlatMapStep 的 processNextStart 逻辑是在干啥我们并没有理清楚。&lt;/p&gt;

&lt;p&gt;AbstractStep 有一个 &lt;code&gt;protected ExpandableStepIterator&amp;lt;S&amp;gt; starts = new ExpandableStepIterator&amp;lt;&amp;gt;(this);&lt;/code&gt; 它的 next 方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public Traverser.Admin&amp;lt;S&amp;gt; next() {
    if (!this.traverserSet.isEmpty())
        return this.traverserSet.remove();
    /////////////
    if (this.hostStep.getPreviousStep().hasNext())
        return this.hostStep.getPreviousStep().next();
    /////////////
    return this.traverserSet.remove();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看出，其实并没有什么逻辑，就是 &lt;code&gt;return this.hostStep.getPreviousStep().next()&lt;/code&gt;，而前面会加一个 traverserSet 判断，而且 traverserSet 是空的，需要显式调用
add 方法才能添加，所以 ExpandableStepIterator 实际上就是对 Step 的一个拓展代理，让 Step 拥有更多功能。&lt;/p&gt;

&lt;p&gt;然后我们回到 FlatMapStep 的 processNextStart 方法，我们可以看出，实际上逻辑就是 flatMap( getPreviousStep().next() ) ，也就是先调用父Step的next方法，然后执行一个 flatMap。
具体的flatMap 方法逻辑由子类实现。&lt;/p&gt;

&lt;h3 id=&#34;debug简单总结&#34;&gt;debug简单总结&lt;/h3&gt;

&lt;p&gt;通过这次debug我们大概知道了整个程序运行的逻辑。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;g 是一个 GraphTraversalSource 类型对象，g 作为一个 遍历源每次初始会 new DefaultGraphTraversal&amp;lt;&amp;gt;(GraphTraversalSource)；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;首先我们的代码，g.V().outE().inV().values() 每次调用都会添加一个 Step。
例如 g.V() 添加 GraphStep，outE() inV() values() 分别 VertexStep EdgeVertexStep PropertiesStep，他们都继承自 FlatMapStep。step之间有依赖关系。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当调用 Traversal 的 next 等action 方法，会触发查询。实际上会调用 finalEndStep 的next 方法。实际上会调用 AbstractStep 的 processNextStart。
不同的 processNextStart 会有不同的实现，例如 GraphStep 就是查库，FlatMapStep 就是调用上一个 Step 的 next 然后执行 flatMap 方法。类似 spark 的实现方式。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>