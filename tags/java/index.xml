<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 数据分析师之旅</title>
    <link>https://dengziming.github.io/tags/java/</link>
    <description>Recent content in Java on 数据分析师之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 24 Nov 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dengziming.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>headfirst 设计模式</title>
      <link>https://dengziming.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/headfirst-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/headfirst-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      
        <description>

&lt;p&gt;设计模式很抽象，其实以前我也尝试学过，只不过只学了一些表面，没有吃透，所以再学一下。能把抽象讲具体的人，都很厉害。&lt;/p&gt;

&lt;p&gt;这个网址有资料： &lt;a href=&#34;https://refactoring.guru/design-patterns&#34;&gt;https://refactoring.guru/design-patterns&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;策略模式&#34;&gt;策略模式&lt;/h2&gt;

&lt;p&gt;封装算法&lt;/p&gt;

&lt;h2 id=&#34;观察者模式&#34;&gt;观察者模式&lt;/h2&gt;

&lt;p&gt;java 自带了库&lt;/p&gt;

&lt;h2 id=&#34;装饰模式&#34;&gt;装饰模式&lt;/h2&gt;

&lt;p&gt;装饰器和原类实现同一个接口&lt;/p&gt;

&lt;h2 id=&#34;工厂&#34;&gt;工厂&lt;/h2&gt;

&lt;p&gt;Objectville&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
// 第一个版本
Pizza orderPizza(){
	Pizza pizza = new Pizza();
	pizza.prepare();
	pizza.bake();
	return pizza;
}

// 第二个版本

Pizza orderPizza(String type){

	Pizza pizza ;
	if (type = &amp;quot;cheese&amp;quot;){
		pizza = new CheesePizza();
	}else if(){
	    pizza= new ....
	}
	
	pizza.prepare();
	pizza.bake();
	return pizza;
}

// version 3

class PizzaStore {

	SimplePizzaFactory factory;
	// constructor
	
	Pizza orderPizza(String type){
	
		Pizza pizza = factory.createPizza(type)
		
		pizza.prepare();
		pizza.bake();
		return pizza;
	}

}

class SimplePizzaFactory {

	Pizza createPizza(String type){
		Pizza pizza ;
		if (type = &amp;quot;cheese&amp;quot;){
			pizza = new CheesePizza();
		}else if(){
		    pizza= new ....
		}
		return pizza;
	}
}


// version 4 

class PizzaStore {
	SimplePizzaFactory factory;
	// constructor
	
	Pizza orderPizza(String type){
	
		Pizza pizza = factory.createPizza(type)
		
		pizza.prepare();
		pizza.bake();
		return pizza;
	}
}

abstrat class PizzaFactory {
    Pizza createPizza(String type);
}

class NYPizzaFactory extends PizzaFactory{
	Pizza createPizza(String type){
	    Pizza pizza ;
		if (type = &amp;quot;cheese&amp;quot;){
			pizza = new NYCheesePizza();
		}else if(){
		    pizza= new ....
		}
		return pizza;
	}
}

class ChicagoPizzaFactory extends PizzaFactory{

	Pizza createPizza(String type){
	    Pizza pizza ;
		if (type = &amp;quot;cheese&amp;quot;){
			pizza = new ChicagoCheesePizza();
		}else if(){
		    pizza= new ....
		}
		return pizza;
	}
}

// version 5

abstract class PizzaStore {
	
	
	Pizza orderPizza(String type){
	
		Pizza pizza = createPizza(type)
		
		pizza.prepare();
		pizza.bake();
		return pizza;
	}
	
	abstract Pizza createPizza(type);
}

class NYPizzaStore extends PizzaStore{
	Pizza createPizza(type){
	    if (type = &amp;quot;cheese&amp;quot;){
			pizza = new NYCheesePizza();
		}else if(){
		    pizza= new ....
		}
	}
}

class ChicagoPizzaStore extends PizzaStore{
	Pizza createPizza(type){
		if (type = &amp;quot;cheese&amp;quot;){
			pizza = new ChicagoCheesePizza();
		}else if(){
		    pizza= new ....
		}
	}
}

// version 6

class ComPizzaStore{
	Pizza createPizza(string style, String type){
	    if (style = &amp;quot;NY&amp;quot;){
	        if (type = &amp;quot;cheese&amp;quot;){
	            // 
	        }
	    }
	    if (style = &amp;quot;NY&amp;quot;){
	    	if (type = &amp;quot;&amp;quot;){
	    	    //
	    	}
	    }
	}
}

// version 7  add ingredients

interface PizzaIngredientFactory {
	createSoil();
	createClam();
}

class NYPizzaIngredientFactory extends PizzaIngredientFactory{}
...
class ChicagoPizzaIngredientFactory extends PizzaIngredientFactory{}
...

abstract class Pizza {
    string soil;
    string clam;
    
    void prepare();
    void bake();
}

class CheesePizza extends Pizza{
    PizzaIngredientFactory ingerdientFactory;
    
    // constructor
    
    void prepare(){
    	soil = ingerdientFactory.createSoil();
    	clam = ingerdientFactory.createClam();
    }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;单例&#34;&gt;单例&lt;/h2&gt;

&lt;p&gt;这个熟悉了&lt;/p&gt;

&lt;h2 id=&#34;命令模式&#34;&gt;命令模式&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>代码整洁之道0-阅读提示</title>
      <link>https://dengziming.github.io/post/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%930-%E9%98%85%E8%AF%BB%E6%8F%90%E7%A4%BA/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%930-%E9%98%85%E8%AF%BB%E6%8F%90%E7%A4%BA/</guid>
      
        <description>&lt;p&gt;马丁(Robert C. Martin). “代码整洁之道.” 初看可能感觉没啥提高，都是经验的东西，然后囫囵吞枣翻页，突然有的地方很深奥，又要放慢速度。&lt;/p&gt;

&lt;p&gt;我的感觉是先看 第17章 味道与启发，这里提了一些不好的注释，然后就是前几章，都是一些经验的东西，没有技术上的内容。主要是记心里。&lt;/p&gt;

&lt;p&gt;然后越往后越是需要一些思考，这里还顺便介绍了早起的 JUnit 实现。并发编程的一些原则等。需要一定的投入。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记10-大型重构</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B010-%E5%A4%A7%E5%9E%8B%E9%87%8D%E6%9E%84/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B010-%E5%A4%A7%E5%9E%8B%E9%87%8D%E6%9E%84/</guid>
      
        <description>

&lt;p&gt;前面的步骤写着写着就觉得很无趣，只见树木不见森林，但是至少要大概知道有这种方法，合适需要使用这种方法，然后可以来查阅怎么使用，用多了自然会了。
但是这些步骤还会太简单，真正在重构的时候，实际上是没这么简单的，相互之间依赖太深。&lt;/p&gt;

&lt;h2 id=&#34;tease-apart-inheritance-梳理并分解继承体系&#34;&gt;Tease Apart Inheritance（梳理并分解继承体系）&lt;/h2&gt;

&lt;p&gt;某个继承体系同时承担两项责任。
建立两个继承体系，并通过委托关系让其中一个可以调用另一个。&lt;/p&gt;

&lt;p&gt;这个不好说清楚，记忆中 JanusGraph 源码可能有这种继承体系。JanusGraph 继承类 来自 Tinkerpop 的 图元素体系。Tinkerpop 自己也有一套体系，例如 vertex 和 edge 都继承自 element。&lt;/p&gt;

&lt;p&gt;首先要发现问题：如果继承体系中的某一特定层级上的所有类，其子类名称都以相同的形容词开始，那么这个体系很可能就是承担着两项不同的责任。&lt;/p&gt;

&lt;p&gt;例如有个 Deal 类表示交易，有 ActiveDeal 和PassiveDeal 两个子类。有人突然想基于它做一个表格展示，于是写了个 TabularActiveDeal 和 TabularPassiveDeal 两个子类。
这就出现了继承体系不纯，承担两项责任，一开始没啥，后来发现很难添加新的Deal。&lt;/p&gt;

&lt;p&gt;首先我们应该新建 Tabular 相关接口 PresentationStyle，并且引用一下 Deal 对象。然后开始 Move Filed 和 Move Method。&lt;/p&gt;

&lt;h2 id=&#34;convert-procedural-design-to-objects-将过程化设计转化为对象设计&#34;&gt;Convert Procedural Design to Objects （将过程化设计转化为对象设计）&lt;/h2&gt;

&lt;p&gt;你手上有一些传统过程化风格的代码。
将数据记录变成对象，将大块的行为分成小块，并将行为移入相关对象之中。&lt;/p&gt;

&lt;p&gt;这是面向对象的思维转换：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Order
    实体类属性

class OrderLine
   实体类属性
   
class Calculator
    computePrice(Order):
    computeTaxes(Order)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转化为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Order
	computePrice():
    computeTaxes()

class OrderLine
	computePrice():
    computeTaxes()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;separate-domain-from-presentation-将领域和表述-显示分离&#34;&gt;Separate Domain from Presentation （将领域和表述/显示分离）&lt;/h2&gt;

&lt;p&gt;这个描述有 GUI 操作，暂且跳过&lt;/p&gt;

&lt;h2 id=&#34;extract-hierarchy-提炼继承体系&#34;&gt;Extract Hierarchy（提炼继承体系）&lt;/h2&gt;

&lt;p&gt;你有某个类做了太多工作，其中一部分工作是以大量条件表达式完成的。
建立继承体系，以一个子类表示一种特殊情况。这里需要用到工厂模式。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记11-使用IDEA重构</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B011-%E4%BD%BF%E7%94%A8idea%E9%87%8D%E6%9E%84/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B011-%E4%BD%BF%E7%94%A8idea%E9%87%8D%E6%9E%84/</guid>
      
        <description>&lt;p&gt;当你学会了重构，需要使用一些工具，更加快速。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>UML类图画法</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/uml/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/uml/</guid>
      
        <description>

&lt;h2 id=&#34;uml类图思考&#34;&gt;UML类图思考&lt;/h2&gt;

&lt;p&gt;建模是很复杂的，UML 类图是很好的工具，必须首先掌握。&lt;/p&gt;

&lt;p&gt;首先我们自己思考一下，如果自己设计UML语言，应该如何设计。类与类之间的关系如何安排，例如学校管理。&lt;/p&gt;

&lt;p&gt;首先就是抽象与实现的关系，需要有各种人，所以人是一个抽象，具体的教师、职工、学生都是实现。&lt;/p&gt;

&lt;p&gt;另外是包含关系，例如班级包含了学生，学生和老师组成了班级。&lt;/p&gt;

&lt;p&gt;还有一种是年级和班级的关系，班级组合为年级，和上一种关系不一样的是，但是班级不能脱离年级单独存在。&lt;/p&gt;

&lt;p&gt;最后就是关联关系，这种关系就是多个类之间为了完成一件事必须存在某种联系，例如选课需要学生和课程，上课需要学生和老师，组织一次活动需要组织者和参与者。&lt;/p&gt;

&lt;h2 id=&#34;uml-类图表示&#34;&gt;UML 类图表示&lt;/h2&gt;

&lt;p&gt;我们自己总结了，但是实际上别人已经总结好了，更完善专业，我们进行学习。&lt;/p&gt;

&lt;h3 id=&#34;1-泛化-generalization&#34;&gt;1. 泛化（Generalization）&lt;/h3&gt;

&lt;p&gt;泛化是一种继承关系，空心箭头的实线表示,箭头指向父类 &amp;lt;|——————————————————————&lt;/p&gt;

&lt;h3 id=&#34;2-实现-realization&#34;&gt;2. 实现（Realization）&lt;/h3&gt;

&lt;p&gt;类似泛化，但是是实现接口,用带空心箭头的虚线表示,箭头指向接口  &amp;lt;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;

&lt;h3 id=&#34;3-一般关联&#34;&gt;3.  一般关联&lt;/h3&gt;

&lt;p&gt;任何类都能因为某个方法，产生关系。带普通箭头的实心线&lt;/p&gt;

&lt;h3 id=&#34;4-聚合-aggregation&#34;&gt;4. 聚合（Aggregation）&lt;/h3&gt;

&lt;p&gt;整体与部分的联系。空心菱形的实线。&lt;/p&gt;

&lt;h3 id=&#34;5-组合-composition&#34;&gt;5. 组合（Composition）&lt;/h3&gt;

&lt;p&gt;整体与部分的关系，是比聚合关系还要强的关系。实心菱形的实线表示，菱形指向整体。&lt;/p&gt;

&lt;h3 id=&#34;6-依赖-dependency&#34;&gt;6. 依赖（Dependency）&lt;/h3&gt;

&lt;p&gt;这个上面没说，实际上很多都是这个关系。要避免双向依赖，一般来说，不应该存在双向依赖。带箭头的虚线表示，箭头指向被依赖元素。&lt;/p&gt;

&lt;p&gt;强弱顺序： 泛化 = 实现 &amp;gt; 组合 &amp;gt; 聚合 &amp;gt; 关联 &amp;gt; 依赖&lt;/p&gt;

&lt;h2 id=&#34;实例&#34;&gt;实例&lt;/h2&gt;

&lt;p&gt;UML类图也不是一学就会的，需要有一个慢慢熟练的过程。所谓学无止境，其实这才是理解面向对象的开始呢。
实例网上比较多。例如： &lt;a href=&#34;https://blog.csdn.net/monkey_d_meng/article/details/6005764&#34;&gt;https://blog.csdn.net/monkey_d_meng/article/details/6005764&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记1-简单实例重构</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B01-%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%E9%87%8D%E6%9E%84/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B01-%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%E9%87%8D%E6%9E%84/</guid>
      
        <description>

&lt;h1 id=&#34;重构-第一个案例&#34;&gt;重构，第一个案例&lt;/h1&gt;

&lt;p&gt;第一个案例，太简单也不好，太复杂也不好。&lt;/p&gt;

&lt;h2 id=&#34;1-1-起点&#34;&gt;1.1 起点&lt;/h2&gt;

&lt;p&gt;“影片出租店用的程序”，计算程序租了哪些影片，租期多长，可以计算费用积分。影片分为几类，积分根据影片是否为新片而不同。&lt;/p&gt;

&lt;p&gt;UML 图很简单。首先定义三个实体类，影片、租赁、顾客，各自的方法。再加一个 生成详单的方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public String statement(){
        double totalAmount = 0;
        int frequentRenterPoints = 0;
        Enumeration rentals = _rentals.elements();
        String result = &amp;quot;Rental Record for &amp;quot; + getName()+ &amp;quot;\n&amp;quot;;
        while (rentals.hasMoreElements()){
            double thisAmount = 0;
            Rental each = (Rental)rentals.nextElement();
            //determine amounts for each line
            switch (each.getMovie().getPriceCode()){
                case Movie.REGULAR:
                    thisAmount += 2;
                    if (each.getDaysRented()&amp;gt; 2)
                        thisAmount += (each.getDaysRented()- 2)* 1.5;
                    break;
                case Movie.NEW_RELEASE:
                    thisAmount += each.getDaysRented()* 3;
                    break;
                case Movie.CHILDRENS:
                    thisAmount += 1.5;
                    if (each.getDaysRented()&amp;gt; 3)
                        thisAmount += (each.getDaysRented()- 3)* 1.5;
                    break;
            }
            // add frequent renter points
            frequentRenterPoints ++;
            // add bonus for a two day new release rental
            if ((each.getMovie().getPriceCode()== Movie.NEW_RELEASE)&amp;amp;&amp;amp;
                each.getDaysRented()&amp;gt; 1)frequentRenterPoints ++;
            //show figures for this rental
            result += &amp;quot;\t&amp;quot; + each.getMovie().getTitle()+ &amp;quot;\t&amp;quot; +
                String.valueOf(thisAmount)+ &amp;quot;\n&amp;quot;;
            totalAmount += thisAmount;
        }
            //add footer lines
        result += &amp;quot;Amount owed is &amp;quot; + String.valueOf(totalAmount)+ &amp;quot;\n&amp;quot;;
        result += &amp;quot;You earned &amp;quot; + String.valueOf(frequentRenterPoints)+
            &amp;quot; frequent renter points&amp;quot;;
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相比之下这个方法很简单，也很清晰，算是个好代码吗？&lt;/p&gt;

&lt;h2 id=&#34;重构&#34;&gt;重构&lt;/h2&gt;

&lt;p&gt;其实我们应该通过自己的思考获得知识，而不是通过学习。学习到的只是表面属于你，思考的知识才是真的属于你。所以我只是大概看了一下书，然后自己重新推导一下，遇到不会的了，再回去看书。&lt;/p&gt;

&lt;h3 id=&#34;switch-if-语句处理&#34;&gt;switch if 语句处理&lt;/h3&gt;

&lt;p&gt;首先我觉得 switch 语句现需要进行更改。我希望吧 switch 变成多态的方式实现，不只是switch，一些if else 也可以通过多态方式实现。&lt;/p&gt;

&lt;p&gt;我们看出这段代码主要是 根据 Rental each 计算 thisAmount。而且都是直接加，所以可以不用将 thisAmount 作为参数只需要将 each 作为参数，根据 each 计算 thisAmount 的逻辑和电影种类有关系。
因为 switch 的判断条件是 movie相关，所以实现方式就是定义三个 Movie 的子类。每个子类都有一个计算 thisAmount 增量的方法，方法参数是Rental each。逻辑就是复制这里的三段逻辑。&lt;/p&gt;

&lt;p&gt;这样的话引进一个问题，现在 Movie 变成了抽象类，我们就需要修改之前 new Movie 的代码，改的方法可以使用工厂模式，但是还是需要判断 PriceCode，根据不同的值 new 不同对象。
然后这个 switch 语句就可以换成 each.getMovie().getPrice(each) 了。&lt;/p&gt;

&lt;p&gt;这样是有可能问题的，第一个问题是我们新建了三种 Movie ，实际上这只是它的 pricecode，不能因为 pricecode变了movie 就变了，另外，movie 一旦new了类型不能变，但是电影的类型是可能变的。
所以我们需要借助 状态模式/策略模式，不是new 三个 Movie ，二是new 三个 PriceCode。
实现方式比上面的操作可能更简单一点，因为都不需要修改  Movie 的构造方法。直接修改 Movie 构造方法，将 PriceCode 赋值变成 new 三个不同的 对象。然后对应的 getprice 调用 PriceCode 的方法即可。&lt;/p&gt;

&lt;p&gt;另外有一点就是抽象出来的方法，为什么将 Rental each 作为参数传入而不是 pricecode，因为 pricecode 是可以变得东西。我们需要在 pricecode 计算费用。&lt;/p&gt;

&lt;p&gt;同理 frequentRenterPoints 计算和 thisAmount 一样，和 Movie 种类有关，所以也可以吧 后面的 if 语句放入 pricecode 中。&lt;/p&gt;

&lt;p&gt;这就是我的处理方法，用 多态/state/strategy 替换 switch。&lt;/p&gt;

&lt;h3 id=&#34;模板分解&#34;&gt;模板分解&lt;/h3&gt;

&lt;p&gt;我们发现其实 thisAmount 和 frequentRenterPoints 是我们计算的主要逻辑，返回结果基于他们拼凑。所以他们两个的逻辑可以放到两个单独的方法，顺便可以改一下变量名。&lt;/p&gt;

&lt;p&gt;这样带来一个副作用，因为计算是需要循环遍历，本身只需要循环一次，现在需要循环三次了。&lt;/p&gt;

&lt;p&gt;当我们移动以后，可以发现提炼出来的某些方法完全不应该属于这个类，可以放到另一个类中。然后我们可能发现某些局部变量变得多余，可以移除。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记2-原则、测试</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B02-%E5%8E%9F%E5%88%99%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B02-%E5%8E%9F%E5%88%99%E6%B5%8B%E8%AF%95/</guid>
      
        <description>

&lt;h2 id=&#34;原则&#34;&gt;原则&lt;/h2&gt;

&lt;p&gt;重构原则，这属于定义性内容，这里不多写。&lt;/p&gt;

&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;

&lt;p&gt;文中的 JUnit 比较老，现在的 JUnit 技术很新很复杂很强大，后续会专门抽出一节内容介绍并且实践JUnit。&lt;/p&gt;

&lt;h2 id=&#34;代码坏味道&#34;&gt;代码坏味道&lt;/h2&gt;

&lt;p&gt;这个不用说了，文中给了很多原则，在我们开发中，基本上就是所有人写的代码，都是臭的，特别是自己的。
所有的代码，都需要重构。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记3-重新组织函数</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B03-%E9%87%8D%E6%96%B0%E7%BB%84%E7%BB%87%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B03-%E9%87%8D%E6%96%B0%E7%BB%84%E7%BB%87%E5%87%BD%E6%95%B0/</guid>
      
        <description>

&lt;p&gt;其实重新组织函数的方法，我们在没有学过重构的情况下，也是经常使用的。只不过我们没有统一规范，每次使用都要分析使用情况，都比较费劲。&lt;/p&gt;

&lt;p&gt;例如有时候我们从大函数提炼一个小函数，我们并没有关心提炼的原则和什么时候适合提炼。只是胡乱吧方法提出来，让逻辑和以前一样就行，这样效率低，而且易出错。这次正好可以总结一下。&lt;/p&gt;

&lt;h2 id=&#34;提炼函数-extract-method&#34;&gt;提炼函数 (Extract Method)&lt;/h2&gt;

&lt;p&gt;提炼函数是我们经常用到的重构手法。从一个大函数提炼小段代码。我们主要会遇到这样的问题。&lt;/p&gt;

&lt;h3 id=&#34;函数命名&#34;&gt;函数命名&lt;/h3&gt;

&lt;p&gt;这个是很需要注意的，命名应该是函数做了什么而不是怎么做。&lt;/p&gt;

&lt;h3 id=&#34;引用了变量&#34;&gt;引用了变量&lt;/h3&gt;

&lt;p&gt;函数内部引用变量时候，我们需要分情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果没有引用变量，或者引用了全局变量，这很好办，直接提炼。&lt;/li&gt;
&lt;li&gt;如果引用的变量只是使用没有发生重新赋值。把变量作为函数参数传入。&lt;/li&gt;
&lt;li&gt;如果局部变量再赋值，只在提炼的代码段被使用，那么可以直接在目标函数进行修改。如果源函数还使用了这个变量，那就应该作为返回值。如果返回值不止一个，如果是 scala 好办，但是如果java，尽量吧两个值的操作放在两个方法中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;引用了源函数参数&#34;&gt;引用了源函数参数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大部分情况和 引用了变量 一样操作。&lt;/li&gt;
&lt;li&gt;如果局部变量再赋值，而且源函数的参数被赋值，应该马上使用Remove Assignments to Parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;内联函数&#34;&gt;内联函数&lt;/h2&gt;

&lt;p&gt;内联我没太懂啥意思。翻译的人也没有解释。这里感觉就是A函数 调用了B函数，A B 就是内联函数。&lt;/p&gt;

&lt;p&gt;内联函数处理，主要就是判断函数是不是不具备多态性，逻辑也是比较固定，而且代码简单，而且和函数名一样清楚明了，就直接吧函数调用换成代码。&lt;/p&gt;

&lt;h2 id=&#34;内联临时变量&#34;&gt;内联临时变量&lt;/h2&gt;

&lt;p&gt;如果临时变量只被调用一次，完全没必要。如果是某个临时变量某个函数的返回值，而且妨碍了其他重构手法，就应该想办法去掉。&lt;/p&gt;

&lt;h2 id=&#34;replace-temp-with-query-以查询取代临时变量&#34;&gt;Replace Temp with Query（以查询取代临时变量）&lt;/h2&gt;

&lt;p&gt;某个临时变量是一堆判断后的逻辑。这时候完全可以吧判断逻辑放到一个方法中。这样做的原因是临时变量会妨碍后续重构。&lt;/p&gt;

&lt;p&gt;临时变量如果被多次赋值，怎么处理呢？我们通过 Split Temporary Variable 将它分解为多个变量。否则，临时变量申明为 final，确保只被赋值一次。然后后续赋值提炼到独立函数。
提炼的函数必须没有副作用，如果他修改了对象内容，也就是有副作用，需要进行 Separate Query From Modifler 。&lt;/p&gt;

&lt;p&gt;这样重构你可能担心函数多次调用又性能问题，大部分情况是不会有的。性能问题主要发生在 IO、查数据库 等上面。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;double getPrice(){
	int basePrice = _quantity * _itemPrice;
	double discountFactor;
	if (basePrice &amp;gt; 1000)discountFactor = 0.95;
	else discountFactor = 0.98;
	return basePrice * discountFactor;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一步，吧 basePrice 申明为final，然后编写 basePrice 方法， 使用 Inline Temp 吧 basePrice 的引用点改成 basePrice() 方法。&lt;/p&gt;

&lt;p&gt;第二步，类似的吧 discountFactor 提炼出来，最后的结果是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;double getPrice(){
	return basePrice()* discountFactor();
}
private double discountFactor(){
	if (basePrice()&amp;gt; 1000)return 0.95;
	else return 0.98;
}
private double basePrice(){
	return _quantity * _itemPrice;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;introduce-explaining-variable-引入解释性变量&#34;&gt;Introduce Explaining Variable（引入解释性变量）&lt;/h2&gt;

&lt;p&gt;这个貌似和上一个 是反过来的步骤，对于比较长的表达式，其中一部分的结果可以用易于解释的变量表达。
做法：申明final变量，赋值表达式。替换。
这个用得比较少，毕竟局部变量没法重用。&lt;/p&gt;

&lt;h2 id=&#34;split-temporary-variable-分解临时变量&#34;&gt;Split Temporary Variable（分解临时变量）&lt;/h2&gt;

&lt;p&gt;这个就是上面说的，如果被多次赋值，没法用 final 表示，怎么办。
循环遍历和收集变量是必须滴，其他的如果多次赋值，就承担了过多的意义，应该换另一个变量表示。&lt;/p&gt;

&lt;h2 id=&#34;remove-assignments-to-parameters-移除对参数的赋值&#34;&gt;Remove Assignments to Parameters（移除对参数的赋值）&lt;/h2&gt;

&lt;p&gt;如果你对参数进行赋值，至少在 java 中是没有意义的。&lt;/p&gt;

&lt;h2 id=&#34;replace-method-whth-method-object-以函数对象取代函数&#34;&gt;Replace Method whth Method Object (以函数对象取代函数)&lt;/h2&gt;

&lt;p&gt;局部变量测存在使得函数提取很难，但是用函数对象替换以后就方便多了。因为局部变量都变成了全局变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Class Account
	int gamma (int inputVal,int quantity,int yearToDate){
	int importantValue1 = (inputVal * quantity)+ delta();
	int importantValue2 = (inputVal * yearToDate)+ 100;
	if ((yearToDate - importantValue1)&amp;gt; 100)
	importantValue2 -= 20;

	int importantValue3 = importantValue2 * 7;
	// and so on.
	return importantValue3 - 2 * importantValue1;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里有很多局部变量，提取比较麻烦。怎么弄呢：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Gamma...
	private final Account _account;
	private int inputVal;
	private int quantity;
	private int yearToDate;
	private int importantValue1;
	private int importantValue2;
	private int importantValue3;
	
Gamma (Account source,int inputValArg,int quantityArg,int yearToDateArg){
	_account = source;
	inputVal = inputValArg;
	quantity = quantityArg;
	yearToDate = yearToDateArg;
}

int compute (){
	importantValue1 = (inputVal * quantity)+ _account.delta();
	importantValue2 = (inputVal * yearToDate)+ 100;
	if ((yearToDate - importantValue1)&amp;gt; 100)
	importantValue2 -= 20;
	int importantValue3 = importantValue2 * 7;
	// and so on.
	return importantValue3 - 2 * importantValue1;
}


int gamma (int inputVal,int quantity,int yearToDate){
	return new Gamma(this,inputVal,quantity,yearToDate).compute();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样一来，gamma 相关的都放在 Gamma 类，而 Gamma 的 compute 方法都没有局部变量了。这样就可以随意重构。&lt;/p&gt;

&lt;h3 id=&#34;substitute-algorithm-替换算法&#34;&gt;Substitute Algorithm （替换算法）&lt;/h3&gt;

&lt;p&gt;这个不必多说，考验人的水平，需要你了解函数，并且能够思考出简单的算法。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记4-一次重构尝试</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B04-%E4%B8%80%E6%AC%A1%E9%87%8D%E6%9E%84%E5%B0%9D%E8%AF%95/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B04-%E4%B8%80%E6%AC%A1%E9%87%8D%E6%9E%84%E5%B0%9D%E8%AF%95/</guid>
      
        <description>

&lt;p&gt;搞了这么久，我觉得有必要对我的项目重构一下。已经学了那么多，再加上我写的代码那么烂，重构肯定是很容易上手。&lt;/p&gt;

&lt;p&gt;本文没什么干货，纯属自己的一点记录。&lt;/p&gt;

&lt;h2 id=&#34;项目介绍&#34;&gt;项目介绍&lt;/h2&gt;

&lt;p&gt;其实项目代码有点乱，这是一个写入数据到 cassandra 的项目（实际上是写入到JanusGraph）。&lt;/p&gt;

&lt;p&gt;我们有两套集群，数据写到 cassandra 要知道写到哪个集群。这是需要配置的，然后我们的导入数据分为全量导入和增量导入，这也是需要配置。&lt;/p&gt;

&lt;p&gt;上面两个配置确定后，其他导数据相关配置直接放在 cassandra 中存储，比如导入到哪个 keyspace，这也是为了方便管理。&lt;/p&gt;

&lt;p&gt;然后是导数据的代码，先不重构，但是导数据的时候可能有个建schema 操作，也需要查询 cassandra配置。&lt;/p&gt;

&lt;h2 id=&#34;简单重构&#34;&gt;简单重构&lt;/h2&gt;

&lt;p&gt;之前的代码将这两部分直接放在一个类中。首先我要做的就是讲这部分代码拆分，首先拆分两个类分别放这两中配置，第一个是 JobConfig，第二个是 ImportConfig。
定义 JobConfig 接口，里面添加获取对应配置的方法。然后实现一个默认的 JobConfig 类，返回默认值。然后再定义一个配置文件类，ConfigFileJobConfig，根据配置文件发返回，顺便代理一下默认的 JobConfig。
然后是 ImportConfig ，里面有一个JobConfig 的对象。然后就可以吧方法都搬过来，引用也搬过来，替换掉即可。&lt;/p&gt;

&lt;h2 id=&#34;重构遇到的问题&#34;&gt;重构遇到的问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先我的项目是多模块项目，我将重构后的类放在另一个模块中，导致出现了依赖问题。这个是书中没写的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;然后还有引用的替换问题，我的这个类的作用太多。导致很多方法相互调用，很难处理。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再就是静态和非静态变量处理的问题。以前的配置都是通过静态变量的方式，现在换成两个配置以后，很多地方都是直接new，这样导致出现了非单例模式。之前的配置不知道静态还是非静态了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后是自己心急，总是一下子跳很大一步，最后发现不行，又回退。忙活了一整天，最后发现又退回来了，以后重构应该一步一步来。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;单元测试需要跟上。没跟上居然发生了一个 StackOverFlow。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记5-在对象之间搬移特性</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B05-%E5%9C%A8%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E6%90%AC%E7%A7%BB%E7%89%B9%E6%80%A7/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B05-%E5%9C%A8%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E6%90%AC%E7%A7%BB%E7%89%B9%E6%80%A7/</guid>
      
        <description>

&lt;p&gt;上一次重构尝试好失败，不过学习还是要继续的，而且上次没学习的情况下搬移代码，易出错。这次我们学的是在对象之间搬移。学好了再尝试一下。&lt;/p&gt;

&lt;p&gt;这一部分主要是关于将一部分代码搬进去，搬出去。提取新得类，吸收小的类。&lt;/p&gt;

&lt;h2 id=&#34;搬移函数-move-method&#34;&gt;搬移函数（Move Method）&lt;/h2&gt;

&lt;p&gt;有个函数与另一个类交互更多，最好搬移。另外我们后面很多其他的重构手法也会用到 Move Method。&lt;/p&gt;

&lt;p&gt;其实操作不算复杂，首先需要检查源类的字段函数，如果只被打算搬移的函数用到，就一起搬移。如果被用到了，可以考虑一起搬移。
如果子类父类有相关引用，可能没法搬移。&lt;/p&gt;

&lt;p&gt;这个举例子可以举个之前的例子，通过 多态替代 switch 语句，其实刚新建几个多态类的时候，就需要先将 switch 语句移出，然后将函数搬移到新的类。&lt;/p&gt;

&lt;h2 id=&#34;搬移字段-move-field&#34;&gt;搬移字段（move Field）&lt;/h2&gt;

&lt;p&gt;整个操作步骤相对复杂一点，移动字段到另一个类，需要保证能访问另一个类，然后分别修改引用的函数。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在源类封装源字段。&lt;/li&gt;
&lt;li&gt;在新类添加新字段。&lt;/li&gt;
&lt;li&gt;决定如何在原类添加到另一个类的引用对象。&lt;/li&gt;
&lt;li&gt;删除原字段并将引用替换。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;提炼类-extract-class&#34;&gt;提炼类 （extract class）&lt;/h2&gt;

&lt;p&gt;这个我刚刚做的一个重构就有相应操作，我提炼了几个配置，并且移动字段方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建类，添加字段&lt;/li&gt;
&lt;li&gt;添加旧类访问新类的关系。 注意，尽量不要添加新类到旧类的关系，除非真的需要。&lt;/li&gt;
&lt;li&gt;使用 move field 、movie method。&lt;/li&gt;
&lt;li&gt;决定是否公开类。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;类-内联化-inline-class&#34;&gt;类 内联化 （Inline Class）&lt;/h2&gt;

&lt;p&gt;这个和 extract class 相反。&lt;/p&gt;

&lt;h2 id=&#34;隐藏委托关系-hide-delegate&#34;&gt;隐藏委托关系 （hide delegate）&lt;/h2&gt;

&lt;p&gt;就是通过中间类的方式，去掉太多类之间的联系。举的例子太简单了。&lt;/p&gt;

&lt;h2 id=&#34;移除中间人-remove-middle-man&#34;&gt;移除中间人（Remove Middle Man）&lt;/h2&gt;

&lt;p&gt;和 hide delegate 相反&lt;/p&gt;

&lt;h2 id=&#34;引入外加函数-introduce-foreign-method&#34;&gt;引入外加函数（Introduce Foreign Method）&lt;/h2&gt;

&lt;p&gt;这个我主要是我们需要使用一个类的未实现功能，但是没法修改，只能在另一个类添加一个静态方法，第一个参数就是那个类。
方便以后可以移动到对应的类。&lt;/p&gt;

&lt;h2 id=&#34;引入本地扩展-introduce-local-extension&#34;&gt;引入本地扩展 （Introduce Local Extension）&lt;/h2&gt;

&lt;p&gt;引入本地类，让他继承或者包装源类。&lt;/p&gt;

&lt;p&gt;这个就类似 代理模式了。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;其实前两个用的最多，需要很熟悉。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记6-重新组织数据</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B06-%E9%87%8D%E6%96%B0%E7%BB%84%E7%BB%87%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B06-%E9%87%8D%E6%96%B0%E7%BB%84%E7%BB%87%E6%95%B0%E6%8D%AE/</guid>
      
        <description>

&lt;p&gt;这一次重新组织数据，我还没看之前，感觉并不是主动进行重构，二是为了后续重构提供便利。&lt;/p&gt;

&lt;h2 id=&#34;自封装字段-self-encapsulate-field&#34;&gt;自封装字段（Self Encapsulate Field）&lt;/h2&gt;

&lt;p&gt;其实很多人觉得这个有点多余，scala 语言专门提供了字段访问的方式，隐藏了get set方法。
如果直接访问字段，可能会让耦合关系变得笨拙。当你遇到问题的时候，例如子类可能需要覆盖get函数等，发现通过访问字段方式可能更合适。&lt;/p&gt;

&lt;h2 id=&#34;以对象取代数据-replace-data-value-with-object&#34;&gt;以对象取代数据 （Replace Data Value with Object）&lt;/h2&gt;

&lt;p&gt;对象取代数据，似乎与我们大数据处理是相反的。不过这样可能会存在性能问题，但是大部分情况不用担心。&lt;/p&gt;

&lt;h2 id=&#34;change-value-to-reference-将值对象改为引用对象&#34;&gt;Change Value to Reference（将值对象改为引用对象）&lt;/h2&gt;

&lt;p&gt;这个提到的问题有点类似单例模式，我要保证每个访问点返回同一个对象：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Order...
public Order(String customerName){
	_customer = new Customer(customerName);
}
public void setCustomer(String customerName){
	_customer = new Customer(customerName);
}
public String getCustomerName(){
	return _customer.getName();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个每次 setCustomer 其实都会new 新的。这里可以结合工厂模式，保证每次都是一样的。例如准备一个 HashMap。&lt;/p&gt;

&lt;h2 id=&#34;change-reference-to-value-将引用对象改为值对象&#34;&gt;Change Reference to Value（将引用对象改为值对象）&lt;/h2&gt;

&lt;p&gt;如果你的饮用对象很小，而且不可变。例如只需要一个 userid，就没必要new 一个 user。这里的不可变不是对象不可变，而是不能对他进行修改。也就是没有 setting method&lt;/p&gt;

&lt;h2 id=&#34;replace-array-with-object-以对象取代数组&#34;&gt;Replace Array with Object（以对象取代数组）&lt;/h2&gt;

&lt;p&gt;这个应该属于比较古老的代码，现在我没有遇到过。&lt;/p&gt;

&lt;h2 id=&#34;duplicate-observed-data-复制-被监视数据&#34;&gt;Duplicate Observed Data（复制“被监视数据”）&lt;/h2&gt;

&lt;p&gt;这个属于 GUI 的东西，后续再看。&lt;/p&gt;

&lt;h2 id=&#34;8-7-change-unidirectional-association-to-bidirectional-将单向关联改为双向关联&#34;&gt;8.7 Change Unidirectional Association to Bidirectional （将单向关联改为双向关联）&lt;/h2&gt;

&lt;p&gt;这种手法不太推荐，操作有一定难度。
如果你有自己实现过红黑树、B树的代码，应该有所体验。如果子节点不保存到父节点的指针，那么很多代码操作就会比较复杂。这时候会用双向指针。&lt;/p&gt;

&lt;p&gt;参考 HashMap的源码，父节点有到两个子节点的指针，子节点也有到父节点的指针。&lt;/p&gt;

&lt;p&gt;1.如果两者都是引用对象，而其间的关联是“一对多”关系，那么就由“拥有单一引用”的那一方承担“控制者”角色。以本例而言，如果一个客户可拥有多份定单，那么就由Order类（定单）来控制关联关系。
2.如果某个对象是组成另一对象的部件，那么由后者负责控制关联关系。
3.如果两者都是引用对象s，而其间的关联是“多对多”关系，那么随便其中哪个对象来控制关联关系，都无所谓。&lt;/p&gt;

&lt;h2 id=&#34;双向改为单向&#34;&gt;双向改为单向&lt;/h2&gt;

&lt;p&gt;这和上一步反过来，这个步骤是很麻烦的。&lt;/p&gt;

&lt;h2 id=&#34;字面常量取代魔法数&#34;&gt;字面常量取代魔法数&lt;/h2&gt;

&lt;p&gt;这个实际上就是我们所说的常量提取。但是问题是提取出来的常量放在那里？专门定义类，还是放在出现最多的类里。&lt;/p&gt;

&lt;h2 id=&#34;封装字段&#34;&gt;封装字段。&lt;/h2&gt;

&lt;p&gt;类似 自封装字段。&lt;/p&gt;

&lt;h2 id=&#34;封装集合&#34;&gt;封装集合&lt;/h2&gt;

&lt;p&gt;目的是操作集合字段和其他字段不能和一般字段一样，因为集合可以添加删除字段。&lt;/p&gt;

&lt;h2 id=&#34;以数据类取代记录&#34;&gt;以数据类取代记录&lt;/h2&gt;

&lt;p&gt;类似 将值对象改为引用对象&lt;/p&gt;

&lt;h2 id=&#34;replace-type-code-with-class-以类取代类型码&#34;&gt;Replace Type Code with Class（以类取代类型码）&lt;/h2&gt;

&lt;p&gt;类取代类型码可以方便编译器检查错误。&lt;/p&gt;

&lt;h2 id=&#34;replace-type-code-with-subclasses-以子类取代类型码&#34;&gt;Replace Type Code with Subclasses（以子类取代类型码）&lt;/h2&gt;

&lt;p&gt;如果类型码有对应的判断条件，然后有不同的操作类型，这时候通过子类取代，然后用多态的方式取代判断。&lt;/p&gt;

&lt;h2 id=&#34;8-15-replace-type-code-with-state-strategy-以state-strategy取代类型码&#34;&gt;8.15 Replace Type Code with State/Strategy （以State/Strategy取代类型码）&lt;/h2&gt;

&lt;p&gt;Replace Type Code with Subclasses（以子类取代类型码）很强大，但是以下两种情况你不能那么做：(1)类型码值在对象创建之后发生了改变；(2)由于某些原因，类型码宿主类已经有了子类。如果你恰好面临这两种情况之一，
就需要使用Replace Type Code with State/Strategy (227)。&lt;/p&gt;

&lt;h2 id=&#34;replace-subclass-with-fields-以字段取代子类&#34;&gt;Replace Subclass with Fields（以字段取代子类）&lt;/h2&gt;

&lt;p&gt;这个和上面的操作是相反的，如果类过于简单，只有某个常量数据，就可以取代掉。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记7-简化条件表达式</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B07-%E7%AE%80%E5%8C%96%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B07-%E7%AE%80%E5%8C%96%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      
        <description>

&lt;p&gt;简化条件表达式一方面是简化代码，另外也是提高可读性。&lt;/p&gt;

&lt;h2 id=&#34;9-1-decompose-conditional-分解条件表达式&#34;&gt;9.1 Decompose Conditional（分解条件表达式）&lt;/h2&gt;

&lt;h2 id=&#34;consolidate-conditional-expression-合并条件表达式&#34;&gt;Consolidate Conditional Expression（合并条件表达式）&lt;/h2&gt;

&lt;h2 id=&#34;consolidate-duplicate-conditional-fragments-合并重复的条件片段&#34;&gt;Consolidate Duplicate Conditional Fragments （合并重复的条件片段）&lt;/h2&gt;

&lt;h2 id=&#34;remove-control-flag-移除控制标记&#34;&gt;Remove Control Flag（移除控制标记）&lt;/h2&gt;

&lt;p&gt;这个应该不容易，要看逻辑。&lt;/p&gt;

&lt;h2 id=&#34;replace-nested-conditional-with-guard-clauses-以卫语句取代嵌套条件表达式&#34;&gt;Replace Nested Conditional with Guard Clauses （以卫语句取代嵌套条件表达式）&lt;/h2&gt;

&lt;h2 id=&#34;replace-conditional-with-polymorphism-以多态取代条件表达式&#34;&gt;Replace Conditional with Polymorphism （以多态取代条件表达式）&lt;/h2&gt;

&lt;p&gt;类似上一节，以 多态取代 switch。&lt;/p&gt;

&lt;h2 id=&#34;introduce-null-object-引入null对象&#34;&gt;Introduce Null Object（引入Null对象）&lt;/h2&gt;

&lt;p&gt;这个新版的 java 已经有了相应的对象。&lt;/p&gt;

&lt;h2 id=&#34;introduce-assertion-引入断言&#34;&gt;Introduce Assertion（引入断言）&lt;/h2&gt;

&lt;p&gt;已经会用了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记8-简化函数调用</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B08-%E7%AE%80%E5%8C%96%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B08-%E7%AE%80%E5%8C%96%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid>
      
        <description>

&lt;p&gt;个人感觉简化函数调用不属于重构，二是开发就应该注意的事情。&lt;/p&gt;

&lt;h2 id=&#34;函数改名&#34;&gt;函数改名&lt;/h2&gt;

&lt;p&gt;函数改名，应该遵循一些原则。例如函数名字应该指明做了什么而不是怎么做。&lt;/p&gt;

&lt;h2 id=&#34;add-parameter-添加参数&#34;&gt;Add Parameter（添加参数）&lt;/h2&gt;

&lt;h2 id=&#34;remove-parameter-移除参数&#34;&gt;Remove Parameter（移除参数）&lt;/h2&gt;

&lt;h2 id=&#34;separate-query-from-modifier-将查询函数和修改函数分离&#34;&gt;Separate Query from Modifier （将查询函数和修改函数分离）&lt;/h2&gt;

&lt;h2 id=&#34;parameterize-method-令函数携带参数&#34;&gt;Parameterize Method（令函数携带参数）&lt;/h2&gt;

&lt;p&gt;其实就是提炼函数，我再写代码中遇到很多，都懒得提炼，现在看来，需要提炼一下了。&lt;/p&gt;

&lt;h2 id=&#34;replace-parameter-with-explicit-methods-以明确函数取代参数&#34;&gt;Replace Parameter with Explicit Methods （以明确函数取代参数）&lt;/h2&gt;

&lt;p&gt;和上一步相反，你有一个函数，其中完全取决于参数值而采取不同行为。这时候就提取出不同的函数。&lt;/p&gt;

&lt;h2 id=&#34;preserve-whole-object-保持对象完整&#34;&gt;Preserve Whole Object（保持对象完整）&lt;/h2&gt;

&lt;p&gt;如果你的函数参数是某个对象的多个值，还不如把函数参数改为对象。&lt;/p&gt;

&lt;h2 id=&#34;replace-parameter-with-methods-以函数取代参数&#34;&gt;Replace Parameter with Methods（以函数取代参数）&lt;/h2&gt;

&lt;p&gt;对象调用某个函数，并将所得结果作为参数，传递给另一个函数。
而接受该参数的函数本身也能够调用前一个函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int basePrice = _quantity * _itemPrice;
discountLevel = getDiscountLevel();
double finalPrice = discountedPrice (basePrice,discountLevel);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里 discountedPrice() 方法需要两个参数，而 第二个参数 discountLevel 也是调用 getDiscountLevel() 计算得到的。还不如在 discountedPrice() 方法中调用 getDiscountLevel()。&lt;/p&gt;

&lt;h2 id=&#34;introduce-parameter-object-引入参数对象&#34;&gt;Introduce Parameter Object（引入参数对象）&lt;/h2&gt;

&lt;p&gt;某些参数总是经常一起出现，就将他们作为参数对象传入。&lt;/p&gt;

&lt;h2 id=&#34;remove-setting-method-移除设值函数&#34;&gt;Remove Setting Method（移除设值函数）&lt;/h2&gt;

&lt;p&gt;类中的某个字段应该在对象创建时被设值，然后就不再改变。
去掉该字段的所有设值函数。&lt;/p&gt;

&lt;h2 id=&#34;hide-method-隐藏函数&#34;&gt;Hide Method（隐藏函数）&lt;/h2&gt;

&lt;p&gt;重构的时候要注意有些函数的可见度。&lt;/p&gt;

&lt;h2 id=&#34;replace-constructor-with-factory-method-以工厂函数取代构造函数&#34;&gt;Replace Constructor with Factory Method （以工厂函数取代构造函数）&lt;/h2&gt;

&lt;p&gt;这个经常需要用在某些类似单例模式的类。另外就是前面所说的，有关类型码的操作。这个必须熟悉，因为经常用到：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Employee {
	private int _type;
	static final int ENGINEER = 0;
	static final int SALESMAN = 1;
	static final int MANAGER = 2;
	Employee(int type){
	_type = type;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种代码改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Employee {
	private int _type;
	static final int ENGINEER = 0;
	static final int SALESMAN = 1;
	static final int MANAGER = 2;
	private Employee(int type){
	_type = type;
	
	static Employee create(int type){
		return new Employee(type);
	}
}

static Employee create(int type){
	switch (type){
		case ENGINEER:
			return new Engineer();
		case SALESMAN:
			return new Salesman();
		case MANAGER:
			return new Manager();
	default:
		throw new IllegalArgumentException(&amp;quot;Incorrect type code value&amp;quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 switch 是可以接受的，但是如果要移除，只能通过反射。&lt;/p&gt;

&lt;h2 id=&#34;encapsulate-downcast-封装向下转型&#34;&gt;Encapsulate Downcast（封装向下转型）&lt;/h2&gt;

&lt;p&gt;其实这个再java有了 泛型就用的不多了，但是还是要注意。在调用端不应该强制转型。&lt;/p&gt;

&lt;h2 id=&#34;replace-error-code-with-exception-以异常取代错误码&#34;&gt;Replace Error Code with Exception （以异常取代错误码）&lt;/h2&gt;

&lt;p&gt;这个是开发应该注意的事情。&lt;/p&gt;

&lt;h2 id=&#34;replace-exception-with-test-以测试取代异常&#34;&gt;Replace Exception with Test（以测试取代异常）&lt;/h2&gt;

&lt;p&gt;实际上就是指异常不能作为常用情况的判断，只能作为很少发生情况下的判断。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重构笔记9-处理概括关系</title>
      <link>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B09-%E5%A4%84%E7%90%86%E6%A6%82%E6%8B%AC%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E9%87%8D%E6%9E%84/%E9%87%8D%E6%9E%84%E7%AC%94%E8%AE%B09-%E5%A4%84%E7%90%86%E6%A6%82%E6%8B%AC%E5%85%B3%E7%B3%BB/</guid>
      
        <description>

&lt;p&gt;处理概括关系是重构重点，这些东西开发的时候可能没注意到&lt;/p&gt;

&lt;h2 id=&#34;pull-up-field-字段上移&#34;&gt;Pull Up Field（字段上移）&lt;/h2&gt;

&lt;p&gt;类似提取超类。&lt;/p&gt;

&lt;h2 id=&#34;pull-up-method-函数上移&#34;&gt;Pull Up Method（函数上移）&lt;/h2&gt;

&lt;p&gt;类似提取超类。&lt;/p&gt;

&lt;h2 id=&#34;pull-up-constructor-body-构造函数本体上移&#34;&gt;Pull Up Constructor Body（构造函数本体上移）&lt;/h2&gt;

&lt;h2 id=&#34;push-down-method-函数下移&#34;&gt;Push Down Method（函数下移）&lt;/h2&gt;

&lt;p&gt;函数某个部分只和子类有关。&lt;/p&gt;

&lt;h2 id=&#34;push-down-field-字段下移&#34;&gt;Push Down Field（字段下移）&lt;/h2&gt;

&lt;p&gt;类似上面&lt;/p&gt;

&lt;h2 id=&#34;extract-subclass-提炼子类&#34;&gt;Extract Subclass（提炼子类）&lt;/h2&gt;

&lt;h1 id=&#34;extract-superclass-提炼超类&#34;&gt;Extract Superclass（提炼超类）&lt;/h1&gt;

&lt;h2 id=&#34;extract-interface-提炼接口&#34;&gt;Extract Interface（提炼接口）&lt;/h2&gt;

&lt;h2 id=&#34;collapse-hierarchy-折叠继承体系&#34;&gt;Collapse Hierarchy（折叠继承体系）&lt;/h2&gt;

&lt;p&gt;如果子类和父类差别不大。&lt;/p&gt;

&lt;p&gt;上面这几个比较依赖开发经验，重要的是能够发现相关问题。能够判断什么情况用哪一种。&lt;/p&gt;

&lt;h2 id=&#34;form-template-method-塑造模板函数&#34;&gt;Form Template Method（塑造模板函数）&lt;/h2&gt;

&lt;p&gt;这个属于设计模式的范畴。模板模式&lt;/p&gt;

&lt;h2 id=&#34;replace-inheritance-with-delegation-以委托取代继承&#34;&gt;Replace Inheritance with Delegation （以委托取代继承）&lt;/h2&gt;

&lt;p&gt;类似适配器、代理模式。&lt;/p&gt;

&lt;h2 id=&#34;replace-delegation-with-inheritance-以继承取代委托&#34;&gt;Replace Delegation with Inheritance （以继承取代委托）&lt;/h2&gt;

&lt;p&gt;和上面的步骤相反。&lt;/p&gt;

&lt;p&gt;最重要的是如果作出判断，何时用委托，何时不用。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JVM调优</title>
      <link>https://dengziming.github.io/post/java/jvm-turn/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/jvm-turn/</guid>
      
        <description>

&lt;h2 id=&#34;problem&#34;&gt;problem&lt;/h2&gt;

&lt;p&gt;janusgraph 导数据工具，数据量大的时候，一直卡主。调参意义不大。
通过 -XX:-UseGCOverheadLimit -verbose:gc -XX:+PrintGCDetails  并不能看出啥信息。&lt;/p&gt;

&lt;h2 id=&#34;fix&#34;&gt;fix&lt;/h2&gt;

&lt;h3 id=&#34;jmap&#34;&gt;jmap&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[yangzhiyong@d28-235 graph_kg]$ jmap -heap 15294
Attaching to process ID 15294, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.74-b02

using thread-local object allocation.
Parallel GC with 23 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 32210157568 (30718.0MB)
   NewSize                  = 715653120 (682.5MB)
   MaxNewSize               = 10736369664 (10239.0MB)
   OldSize                  = 1431830528 (1365.5MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
PS Young Generation
Eden Space:
   capacity = 5928648704 (5654.0MB)
   used     = 5928648704 (5654.0MB)
   free     = 0 (0.0MB)
   100.0% used
From Space:
   capacity = 2357723136 (2248.5MB)
   used     = 0 (0.0MB)
   free     = 2357723136 (2248.5MB)
   0.0% used
To Space:
   capacity = 2357723136 (2248.5MB)
   used     = 0 (0.0MB)
   free     = 2357723136 (2248.5MB)
   0.0% used
PS Old Generation
   capacity = 21473787904 (20479.0MB)
   used     = 21473521856 (20478.74627685547MB)
   free     = 266048 (0.25372314453125MB)
   99.99876105696308% used

Exception in thread &amp;quot;main&amp;quot; java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.tools.jmap.JMap.runTool(JMap.java:201)
	at sun.tools.jmap.JMap.main(JMap.java:130)
Caused by: sun.jvm.hotspot.oops.UnknownOopException
	at sun.jvm.hotspot.oops.ObjectHeap.newOop(ObjectHeap.java:263)
	at sun.jvm.hotspot.memory.StringTable.stringsDo(StringTable.java:72)
	at sun.jvm.hotspot.tools.HeapSummary.printInternStringStatistics(HeapSummary.java:299)
	at sun.jvm.hotspot.tools.HeapSummary.run(HeapSummary.java:148)
	at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
	at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
	at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
	at sun.jvm.hotspot.tools.HeapSummary.main(HeapSummary.java:49)
	... 6 more
[yangzhiyong@d28-235 graph_kg]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jmap 可以看出： 配置的堆内存是3G左右，Eden Space  和 PS Old Generation  已经用完了，From 和 TO 还没用， 有 UnknownOopException，问题看起来很复杂。&lt;/p&gt;

&lt;h2 id=&#34;jstack&#34;&gt;jstack&lt;/h2&gt;

&lt;p&gt;jstack -F 15294&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;p&gt;原因:  java.lang.OutOfMemoryError: GC overhead limit exceeded&lt;/p&gt;

&lt;p&gt;Cassandra 的 sstableloader 有这个问题&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java内存区域与内存溢出异常</title>
      <link>https://dengziming.github.io/post/java/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</guid>
      
        <description>

&lt;h2 id=&#34;一-概述&#34;&gt;一、概述&lt;/h2&gt;

&lt;p&gt;我们的代码运行过程中的，虚拟机管理着内存的分配和使用。我们今天先了解内存区域，使我们深入了解JVM的第一步。&lt;/p&gt;

&lt;h2 id=&#34;二-运行时数据区域&#34;&gt;二、运行时数据区域&lt;/h2&gt;

&lt;p&gt;根据java虚拟机规范，虚拟机内存区域结构大概如图，我们详细介绍每个区域：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./_image/2018-04-16-22-37-47.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-程序计数器&#34;&gt;1.程序计数器&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;我们简单想象有个helloworld程序运行。代码最终是一步一步解释为机器码，所以有一个程序计数器，记录当前的代码执行位置，也就是行号。&lt;/li&gt;
&lt;li&gt;假如有两个线程执行helloworld，那每个线程执行到第几行都需要各自保存，每个线程都有独立的计数器。&lt;/li&gt;
&lt;li&gt;如果是循环打印，字节码需要改变程序计数器的值取到下一条指令。&lt;/li&gt;
&lt;li&gt;如果是java方法，计数器指向的是代码位置，如果是native方法，计数器为空。&lt;/li&gt;
&lt;li&gt;程序计数器是唯一一个没有 outofmermoryError情况的区域。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-java虚拟机栈&#34;&gt;2. java虚拟机栈&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;和程序计数器一样，java虚拟机栈也是线程私有。&lt;/li&gt;
&lt;li&gt;我们debug代码的时候，debugger会显示某个正在运行的线程，然后自上而下一次为每个方法对应的栈帧，每个栈帧保存局部变量等，每个方法执行结束，就有一个栈帧入栈到出栈：
&lt;img src=&#34;./_image/2018-04-16-22-48-02.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;局部变量表存储的是各自基本数据类型（8种）和引用。64位的long和double占用两个变量空间，其余的是一个，一般来说，局部变量表的大小是固定的。&lt;/li&gt;
&lt;li&gt;栈有两种异常，Stack OverflowError 和 outofmermoryError，前者是方法调用栈太多，例如递归，后者是内存不够。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-本地方法栈&#34;&gt;3.本地方法栈&lt;/h3&gt;

&lt;p&gt;和栈类似，主要负责本地方法，实现上很自由，有的直接和栈合二为一。也有两种异常。&lt;/p&gt;

&lt;h3 id=&#34;4-java-堆&#34;&gt;4.java 堆&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;内存最大，线程共享，作用就是存放实例（几乎所有的实例，但是技术发展导致没这么绝对）。&lt;/li&gt;
&lt;li&gt;垃圾回收采用分带收集，所以堆包括了新生代、老年代。还可以细分为：eden、from survivor、to survivor。&lt;/li&gt;
&lt;li&gt;可能也有线程私有的内存缓冲区，只是为了更好分配和回收。&lt;/li&gt;
&lt;li&gt;只要逻辑上连续即可，无需物理连续。大小可以调节（-Xmx和-Xms）&lt;/li&gt;
&lt;li&gt;无法扩展并且没有内存分配示例，会有OutOfmermoryError。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;5-方法区&#34;&gt;5.方法区&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;我们运行了一个helloworld方法，对应的主类和常量、静态变量、编译后的代码都需要放在方法去，逻辑上和堆的一个部分。&lt;/li&gt;
&lt;li&gt;基本上不需要垃圾回收，所以有人叫他永久带，实际上只是一开始的JVM将它放在了永久代的而已。但是从1.7开始，已经把原本放在永久代的字符串常量池移出, 放在堆中。&lt;/li&gt;
&lt;li&gt;方法去无法满足内训分配需求，也会有OutOfmermoryError，但是从1.7开始，不在这样。&lt;/li&gt;
&lt;li&gt;类的元数据, 字符串池, 类的静态变量将会从永久代移除, 放入Java heap或者native memory.其中建议JVM的实现中将类的元数据放入 native memory, 将字符串池和类的静态变量放入java堆中. 这样可以加载多少类的元数据就不在由MaxPermSize控制, 而由系统的实际可用空间来控制.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;6-运行时常量池&#34;&gt;6. 运行时常量池&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;是方法区的一部分，.class 文件中除了有类的版本、字段、方法等信息，还有常量池，用于存放编译器的自变量和符号引用。这部分在加载后会进入方法去的运行时常量池。&lt;/li&gt;
&lt;li&gt;.class文件的每一部分格式都很严格。但是常量池很宽松。&lt;/li&gt;
&lt;li&gt;java语言并不要求一定要常量只能在编译时候产生，运行期间也可以将新的常量放入常量池。这种特性用的最多的是String的intern()方法。&lt;/li&gt;
&lt;li&gt;也会有OutOfmermoryError。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;7-直接内存&#34;&gt;7. 直接内存&lt;/h3&gt;

&lt;p&gt;这部分是由于java的NIO引起的&lt;/p&gt;

&lt;h2 id=&#34;三-hotspot对象探秘&#34;&gt;三、Hotspot对象探秘&lt;/h2&gt;

&lt;h3 id=&#34;1-对象的创建&#34;&gt;1.对象的创建&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;从写代码看，对象的创建（例如克隆，反序列化）只是一个new关键字，然后我们调试可以看到其实还执行了 初始化的&lt;init&gt;方法。&lt;/li&gt;
&lt;li&gt;从虚拟机角度看，首先是检查对应的引用能否在常量池中定位到一个类的符号引用，并检查是否已经加载解析和初始化过，如果没有，就要开始加载。&lt;/li&gt;
&lt;li&gt;类的加载我们以后讨论，加载完后需要分配内存。对象大小在加载完成后就已经完全确定了，如果java堆内存是绝对规整的，那么需要维护一个指针指向当前分配到的位置。如果不连续需要维护一个空闲列表。&lt;/li&gt;
&lt;li&gt;分配内存可能是多线程的，有安全问题。要么加锁，要么给每个内存一个预先分配的小内存，成为本地分配缓存。&lt;/li&gt;
&lt;li&gt;内存分配完成后需要初始化为0值，然后进行元数据设置，例如是那个类的实例，GC代等。&lt;/li&gt;
&lt;li&gt;这时候对象创建才刚刚开始，执行 &lt;init&gt;方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-对象的内存布局&#34;&gt;2.对象的内存布局&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;对象在内存中的存储布局可以分为3部分，对象头，实例数据、对象填充。对象头第一部分存储运行时数据，第二部分是类型指针。运行时数据hash码、分带年龄等。类型指针指向类元数据，数组还要记录数组长度。&lt;/li&gt;
&lt;li&gt;第二部分为实例数据，就是代码里面定义的数据内容&lt;/li&gt;
&lt;li&gt;第三部分没什么含义，仅仅是占位符。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-对象的访问&#34;&gt;3.对象的访问&lt;/h3&gt;

&lt;p&gt;1.对象的访问有两种方式，第一种是句柄。java堆会有一块专门的内存作为句柄池，栈存储的是句柄地址，句柄包含了对象示例数据（堆）和类型数据（方法区）各自的指针。
2. 第二中方法是指针访问，栈存储的直接是对象地址，堆的对象布局必须考虑如何放置访问类型数据。
3. 句柄最大的好处是对象改变时不需要改变栈的地址，使用直接内存好处是访问速度快，节省时间。&lt;/p&gt;

&lt;h2 id=&#34;四-实战-outofmermoryerror&#34;&gt;四、实战 OutOfmermoryError&lt;/h2&gt;

&lt;p&gt;除了程序计数器，都会有OutOfMermoryError异常，我们实战一下，在IDEA编写代码，并学习几个参数。&lt;/p&gt;

&lt;h3 id=&#34;1-堆溢出&#34;&gt;1.堆溢出&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Created by dengziming on 17/04/2018.
 * VM ARGS: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
 */
public class HeapOOM {
    static class OOMObject{}
    public static void main(String[] args) {
        List&amp;lt;OOMObject&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        while (true){list.add(new OOMObject());}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VM ARGS:  -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
马上报错：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java.lang.OutOfMemoryError: Java heap space
Dumping heap to java_pid98722.hprof ...
Heap dump file created [27798040 bytes in 0.363 secs]
Exception in thread &amp;quot;main&amp;quot; java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:3210)
	at java.util.Arrays.copyOf(Arrays.java:3181)
	at java.util.ArrayList.grow(ArrayList.java:261)
	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)
	at java.util.ArrayList.add(ArrayList.java:458)
	at io.github.dengziming.session2.HeapOOM.main(HeapOOM.java:21)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何查看对文件和分析，我们后续有内容。简单分析两点：
1. 如果是内存泄露，通过GC工具查看泄露对象的GC引用链，定位代码位置
2. 如果内存溢出，可以考虑调大参数。 -Xmx -Xms&lt;/p&gt;

&lt;h3 id=&#34;2-虚拟机栈和本地方法溢出&#34;&gt;2.虚拟机栈和本地方法溢出&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Created by dengziming on 18/04/2018.
 * VM ARGS -Xss128k
 */
public class JavaVMStackSOF {

    private int stackLenth = 1;
    public void stackLeak(){
        stackLenth ++;
        stackLeak();
    }

    public static void main(String[] args) {
        JavaVMStackSOF oom = new JavaVMStackSOF();
        try{
            oom.stackLeak();
        }catch (Exception e){
            System.out.println(&amp;quot;stackLenth: &amp;quot; + oom.stackLenth);
            throw e;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exception in thread &amp;ldquo;main&amp;rdquo; java.lang.StackOverflowError
结果表明，单线程下，无论是栈帧太大还是栈容量太小，内存无法分配的时候，都是Stack Overflow，如果多线程到不太一样。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Created by dengziming on 18/04/2018.
 * VM ARGS: -Xss20M
 */
public class JavaVMStackOOM {
    private void dontStop(){
        while (true){}
    }
    public void stackLeakByStack(){
        while (true){
            Thread thread = new Thread() {
                @Override
                public void run() {
                    dontStop();
                }
            };
            thread.start();
        }
    }

    public static void main(String[] args) {
        JavaVMStackOOM oom = new JavaVMStackOOM();
        oom.stackLeakByStack();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行完电脑卡死了，算了。这个内存越大反而容易耗尽资源，因为机器内存是固定的，减少容量可以获得更多的线程数。
注意：这时候通过减少内存解决内存溢出的方法，没有经验是不知道的。&lt;/p&gt;

&lt;h3 id=&#34;3-方法区和运行时常量池溢出&#34;&gt;3. 方法区和运行时常量池溢出&lt;/h3&gt;

&lt;p&gt;String.intern() 的含义是返回在代表常量池中这个字符串的对象。如果没有，就将这个字符串放进常量池，并返回引用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * Created by dengziming on 18/04/2018.
 * 
 * vm args: -XX:PermSize=10M -XX:MaxPermSize=10M
 */
public class RuntimeConstantPoolOOM {

    public static void main(String[] args) {

        List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        int i=0;
        while(true){
            list.add(String.valueOf(i++).intern());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不好意思这个方法没有达到效果：
Java HotSpot&amp;trade; 64-Bit Server VM warning: ignoring option PermSize=10M; support was removed in 8.0
Java HotSpot&amp;trade; 64-Bit Server VM warning: ignoring option MaxPermSize=10M; support was removed in 8.0
jdk1.7 已经把原本放在永久代的字符串常量池移出, 放在堆中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static void main(String[] args) {

        while(true){
            Enhancer enhancer = new Enhancer();
            enhancer.setSupperClass(OOMObject.class);
            enhancer.setUserCache(false);
            enhancer.setCallBack(new MethodInterceptor(){
                public Object intercept(Object obj , Method method , Object []args , MethodProxy proxy)throw Throwable{
                    return proxy.invokeSuper(obj , args);
                }
            });
            enhancer.create();
        }
    }
    static class OOMObject{

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个也是一样。因为类的元数据, 字符串池, 类的静态变量从永久代移除, 放入Java heap或者native memory.其中建议JVM的实现中将类的元数据放入 native memory, 将字符串池和类的静态变量放入java堆中.&lt;/p&gt;

&lt;p&gt;String.intern() 在1.6和1.7有不同的实现。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class RuntimeConstantPoolOOM2 {

    public static void main(String[] args) {

        String str1 = new StringBuilder().append(&amp;quot;计算机&amp;quot;).append(&amp;quot;软件&amp;quot;).toString();
        System.out.println(str1.intern() == str1);

        String str2 = new StringBuilder().append(&amp;quot;ja&amp;quot;).append(&amp;quot;va&amp;quot;).toString();
        System.out.println(str2.intern() == str2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.6输出为false和false
1.7输出为true和false
原因是：1.6 的 intern返回在永久代的实例，如果是第一次遇到，会先复制到永久代。1.7不会复制到永久代，只是记录首次出现的实例的引用。
所以1.6的时候两个intern返回的是永久代的引用而不是字符串，1.7的时候 java 这个串已经出现过了。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>垃圾收集器和内存分配策略</title>
      <link>https://dengziming.github.io/post/java/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B9%9F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B9%9F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</guid>
      
        <description>

&lt;h2 id=&#34;一-概述&#34;&gt;一、概述&lt;/h2&gt;

&lt;p&gt;前面我们已经知道，栈的内存是固定的，栈帧多大都是已知。而堆就不一样了。&lt;/p&gt;

&lt;h2 id=&#34;二-判断对象存活状态&#34;&gt;二、判断对象存活状态&lt;/h2&gt;

&lt;p&gt;垃圾回收的第一件事就是判断对象是否还活着，是否可以回收。&lt;/p&gt;

&lt;h3 id=&#34;1-引用计数法&#34;&gt;1.引用计数法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;给对象添加一个引用计数器，被引用时加一，失效时减一，计数器为0就不能被使用了。这种方法无法解决相互引用问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class ReferenceCountingGC {
    public Object instance = null;
    private static final int _1M = 1024 * 1024;
    //很大的内存
    private byte[] bigSize = new byte[2 * _1M];

    public static void main(String[] args) {
        testGC();
    }

    public static void testGC() {

        ReferenceCountingGC obj1 = new ReferenceCountingGC();
        ReferenceCountingGC obj2 = new ReferenceCountingGC();
        obj1.instance = obj2;
        obj2.instance = obj1;

        obj1 = null;
        obj2 = null;

        System.gc();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的日志信息：
TODO 日志分析，gc文件查看&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;
4603k -&amp;gt; 210k

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;意味着并没有因为相互引用就不回收，说明虚拟机并不是通过引用计数实现的。&lt;/p&gt;

&lt;h3 id=&#34;2-可达性分析算法&#34;&gt;2. 可达性分析算法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;主流语言都是通过可达性分析实现垃圾回收。就是通过一系列GCRoots作为七点，判断有没有被引用。如果一个对象到GCRoots没有引用链，用图论的语言就是不可达，那么可以回收。&lt;/li&gt;
&lt;li&gt;java的GCRoots包括 虚拟机栈（栈帧的本地变量表）引用的对象。、方法区中类静态属性引用的对象、方法区中常量引用的对象，本地方法（native方法）引用的对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-理解引用&#34;&gt;3.理解引用&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;引用实际上很重要，上面的两张方法都是通过引用来判断。如果reference类型的数据中存储的数值代表另一个内存的起始地址，就称这块内存代表一个引用。&lt;/li&gt;
&lt;li&gt;一个对象在这种定义下只有引用和被引用两种关系。所以这个定义太过狭隘。&lt;/li&gt;
&lt;li&gt;jdk1.2后java对引用的概念进行了扩充。分为强引用、软引用、弱引用、虚引用。&lt;/li&gt;
&lt;li&gt;四种引用相关的只是可以查询资料。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;4-最后的判断&#34;&gt;4.最后的判断&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;即使判断为不可达对象，也只是处于“缓刑”阶段。要彻底宣告死亡还得经过两次判断。第一次标记后进行筛选，筛选条件是该对象是否有必要执行finalize方法，当对象没有覆盖finalize方法或者已经被调用过，将会被标记为没必要执行。&lt;/li&gt;
&lt;li&gt;如果被标记为有必要执行，会被放在一个F-Queue中，稍后放在一个虚拟机级别的线程中执行这个finalize，但是不会等待它执行。&lt;/li&gt;
&lt;li&gt;finalize是对象拯救自己最后的机会，只要把自己引用到某个对象即可。但是每个对象的finalize只会调用一次，所以下面的代码拯救自己一次。第二次失败了。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class FinalizeEscapeGC {

    public static FinalizeEscapeGC SAVE_HOOK = null;

    public void isAlive(){
        System.out.println(&amp;quot;yes , i am alive&amp;quot;);
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
        System.out.println(&amp;quot;finalize method executed&amp;quot;);
        FinalizeEscapeGC.SAVE_HOOK = this;
    }

    public static void main(String[] args) throws Exception {
        SAVE_HOOK = new FinalizeEscapeGC();

        // 对象第一次成功拯救自己
        SAVE_HOOK = null;
        System.gc();

        //finalize 优先级低，等待执行
        Thread.sleep(1000);

        if (null != SAVE_HOOK) {
            SAVE_HOOK.isAlive();
        }else {
            System.out.println(&amp;quot;no, i am dead&amp;quot;);
        }

        //对象第二次拯救自己
        SAVE_HOOK = null;
        System.gc();
        //finalize 优先级低，等待执行
        Thread.sleep(1000);

        if (null != SAVE_HOOK) {
            SAVE_HOOK.isAlive();
        }else {
            System.out.println(&amp;quot;no, i am dead&amp;quot;);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式太不推荐了。&lt;/p&gt;

&lt;h3 id=&#34;5-回收方法区&#34;&gt;5.回收方法区&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;很多人认为方法去是没有垃圾回收的，其实只是方法区垃圾回收效率低。&lt;/li&gt;
&lt;li&gt;永久代的垃圾回收主要是两部分，一部分是常量，另一部分是无用的类。废弃常量和堆的回收很类似，但是判断一个类是否是无用的类，就比较麻烦。&lt;/li&gt;
&lt;li&gt;无用的类判断条件是：所有实例都被回收了，ClassLoader被回收了，无法在任何地方通过反射得到该类的方法。&lt;/li&gt;
&lt;li&gt;在大量使用反射、动态代理、CGlib等技术的地方，频繁自定义classLoader的地方都要虚拟机具备类卸载的功能，保证永久代不溢出。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;三-垃圾回收算法&#34;&gt;三、垃圾回收算法&lt;/h2&gt;

&lt;h3 id=&#34;1-标记-清楚&#34;&gt;1.标记-清楚&lt;/h3&gt;

&lt;p&gt;对需要回收的对象标记，然后回收。标记和清除效率都不高，而且容易产生碎片。&lt;/p&gt;

&lt;h3 id=&#34;2-复制算法&#34;&gt;2.复制算法&lt;/h3&gt;

&lt;p&gt;将空间分为相同的两块，每次回收后移动到另一边。存活率较高时效率低，另外浪费一半空间&lt;/p&gt;

&lt;h3 id=&#34;3-标记-整理&#34;&gt;3.标记-整理&lt;/h3&gt;

&lt;p&gt;标记然后移动。&lt;/p&gt;

&lt;h3 id=&#34;4-分代回收&#34;&gt;4.分代回收&lt;/h3&gt;

&lt;p&gt;对不同对象用不同方法。&lt;/p&gt;

&lt;h2 id=&#34;四-算法实现&#34;&gt;四、算法实现&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&#34;五-常见垃圾收集器&#34;&gt;五、常见垃圾收集器&lt;/h2&gt;

&lt;h3 id=&#34;1-todo&#34;&gt;1.TODO&lt;/h3&gt;

&lt;h3 id=&#34;2-阅读gc日志&#34;&gt;2.阅读GC日志&lt;/h3&gt;

&lt;p&gt;gc 参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JVM的GC日志的主要参数包括如下几个：

-XX:+PrintGC 输出GC日志

-XX:+PrintGCDetails 输出GC的详细日志

-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）

-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）

-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息

-Xloggc:../logs/gc.log 日志文件的输出路径
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;日志：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.756: [Full GC (System) 0.756: [CMS: 0K-&amp;gt;1696K(204800K), 0.0347096 secs] 11488K-&amp;gt;1696K(252608K), [CMS Perm : 10328K-&amp;gt;10320K(131072K)], 0.0347949 secs] [Times: user=0.06 sys=0.00, real=0.05 secs]  
5.617: [GC 5.617: [ParNew: 43296K-&amp;gt;7006K(47808K), 0.0136826 secs] 44992K-&amp;gt;8702K(252608K), 0.0137904 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解释如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5.617（时间戳）: [GC（Young GC） 5.617（时间戳）: [ParNew（使用ParNew作为年轻代的垃圾回收器）: 43296K（年轻代垃圾回收前的大小）-&amp;gt;7006K（年轻代垃圾回收以后的大小）(47808K)（年轻代的总大小）, 0.0136826 secs（回收时间）] 44992K（堆区垃圾回收前的大小）-&amp;gt;8702K（堆区垃圾回收后的大小）(252608K)（堆区总大小）, 0.0137904 secs（回收时间）] [Times: user=0.03（Young GC用户耗时） sys=0.00（Young GC系统耗时）, real=0.02 secs（Young GC实际耗时）]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个是时间戳，然后是GC或者FullGC代表垃圾回收类型。然后中括号括起来的是年轻代垃圾回收，第一个是垃圾回收器，例如：DefNew，PSYoungGen等，然后是年轻代的容量变化和总用量。中括号外的是堆的总容量。
后面三个是时间，分别是user,sys,real。分别是用户态CPU时间、内核态CPU时间、墙钟时间，墙钟时间包含各种非运算的等待耗时，例如IO阻塞，CPU时间则不包含这些世界，当计算机是多核这些世界会累加，所以看到real或者sys超过real也正常。&lt;/p&gt;

&lt;h3 id=&#34;3-垃圾收集器参数&#34;&gt;3.垃圾收集器参数&lt;/h3&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaNIO</title>
      <link>https://dengziming.github.io/post/java/javanio/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/javanio/</guid>
      
        <description>

&lt;p&gt;// 参考资料
&lt;a href=&#34;http://tutorials.jenkov.com/java-nio/nio-vs-io.html#main-differences-between-java-nio-and-io&#34;&gt;http://tutorials.jenkov.com/java-nio/nio-vs-io.html#main-differences-between-java-nio-and-io&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-io和nio有什么区别&#34;&gt;一、IO和NIO有什么区别&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Stream Oriented vs. Buffer Oriented&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blocking vs. Non-blocking IO&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;IO是阻塞的，一旦调用了 read() or write()，线程就堵住了，NIO非阻塞。&lt;/p&gt;

&lt;h2 id=&#34;二-channels-and-buffers&#34;&gt;二、Channels and Buffers&lt;/h2&gt;

&lt;p&gt;Typically, all IO in NIO starts with a Channel.
A Channel is a bit like a stream. From the Channel data can be read into a Buffer.
Data can also be written from a Buffer into a Channel.&lt;/p&gt;

&lt;p&gt;There are several Channel and Buffer types. Here is a list of the primary Channel implementations in Java NIO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FileChannel
DatagramChannel
SocketChannel
ServerSocketChannel
As you can see, these channels cover UDP + TCP network IO, and file IO.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a list of the core Buffer implementations in Java NIO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ByteBuffer
CharBuffer
DoubleBuffer
FloatBuffer
IntBuffer
LongBuffer
ShortBuffer
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-channel&#34;&gt;1. Channel&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;RandomAccessFile aFile = new RandomAccessFile(&amp;quot;data/nio-data.txt&amp;quot;, &amp;quot;rw&amp;quot;);
    FileChannel inChannel = aFile.getChannel();

    ByteBuffer buf = ByteBuffer.allocate(48);

    int bytesRead = inChannel.read(buf);
    while (bytesRead != -1) {

      System.out.println(&amp;quot;Read &amp;quot; + bytesRead);
      buf.flip();

      while(buf.hasRemaining()){
          System.out.print((char) buf.get());
      }

      buf.clear();
      bytesRead = inChannel.read(buf);
    }
    aFile.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the buf.flip() call. First you read into a Buffer. Then you flip it. Then you read out of it.&lt;/p&gt;

&lt;h3 id=&#34;2-buffer&#34;&gt;2.Buffer&lt;/h3&gt;

&lt;p&gt;Java NIO Buffers are used when interacting with NIO Channels. As you know, data is read from channels into buffers, and written from buffers into channels.&lt;/p&gt;

&lt;p&gt;A buffer is essentially a block of memory into which you can write data, which you can then later read again.
This memory block is wrapped in a NIO Buffer object, which provides a set of methods that makes it easier to work with the memory block.&lt;/p&gt;

&lt;p&gt;Using a Buffer to read and write data typically follows this little 4-step process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Write data into the Buffer
2. Call buffer.flip()
3. Read data out of the Buffer
4. Call buffer.clear() or buffer.compact()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you write data into a buffer, the buffer keeps track of how much data you have written.
Once you need to read the data, you need to switch the buffer from writing mode into reading mode using the flip() method call.
In reading mode the buffer lets you read all the data written into the buffer.&lt;/p&gt;

&lt;p&gt;Once you have read all the data, you need to clear the buffer, to make it ready for writing again.
You can do this in two ways: By calling clear() or by calling compact(). The clear() method clears the whole buffer.
The compact() method only clears the data which you have already read.
Any unread data is moved to the beginning of the buffer, and data will now be written into the buffer after the unread data.&lt;/p&gt;

&lt;p&gt;above had given a simple Buffer usage example, with the write, flip, read and clear operations maked in bold.&lt;/p&gt;

&lt;h3 id=&#34;3-buffer-capacity-position-and-limit&#34;&gt;3. Buffer Capacity, Position and Limit&lt;/h3&gt;

&lt;p&gt;A Buffer has three properties you need to be familiar with, in order to understand how a Buffer works. These are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;capacity
position
limit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The meaning of position and limit depends on whether the Buffer is in read or write mode. Capacity always means the same, no matter the buffer mode.&lt;/p&gt;

&lt;p&gt;position and limit依赖于模式，而capacity在两种模式下都是一样的。&lt;/p&gt;

&lt;p&gt;Being a memory block, a Buffer has a certain fixed size, also called its &amp;ldquo;capacity&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When you write data into the Buffer, you do so at a certain position. Initially the position is 0.
When a byte, long etc. has been written into the Buffer the position is advanced to point to the next cell in the buffer to insert data into.
Position can maximally become capacity - 1.&lt;/p&gt;

&lt;p&gt;When you read data from a Buffer you also do so from a given position.
 When you flip a Buffer from writing mode to reading mode, the position is reset back to 0.
As you read data from the Buffer you do so from position, and position is advanced to next position to read.&lt;/p&gt;

&lt;p&gt;In write mode the limit of a Buffer is the limit of how much data you can write into the buffer. In write mode the limit = capacity&lt;/p&gt;

&lt;p&gt;When flipping the Buffer into read mode, limit means the limit of how much data you can read from the data.
Therefore, when flipping a Buffer into read mode, limit is set to write position of the write mode.&lt;/p&gt;

&lt;h3 id=&#34;4-buffer-types&#34;&gt;4. Buffer Types&lt;/h3&gt;

&lt;p&gt;Java NIO comes with the following Buffer types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ByteBuffer
MappedByteBuffer
CharBuffer
DoubleBuffer
FloatBuffer
IntBuffer
LongBuffer
ShortBuffer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, these Buffer types represent different data types. In other words, they let you work with the bytes in the buffer as char, short, int, long, float or double instead.&lt;/p&gt;

&lt;p&gt;The MappedByteBuffer is a bit special, and will be covered in its own text.&lt;/p&gt;

&lt;h3 id=&#34;5-allocating-a-buffer&#34;&gt;5. Allocating a Buffer&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ByteBuffer buf = ByteBuffer.allocate(48);

CharBuffer buf = CharBuffer.allocate(1024);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-writing-data-to-a-buffer&#34;&gt;6. Writing Data to a Buffer&lt;/h3&gt;

&lt;p&gt;You can write data into a Buffer in two ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Write data from a Channel into a Buffer
int bytesRead = inChannel.read(buf); //read into buffer.
//
Write data into the Buffer yourself, via the buffer&#39;s put() methods.
buf.put(127);    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-flip&#34;&gt;7. flip&lt;/h3&gt;

&lt;p&gt;The flip() method switches a Buffer from writing mode to reading mode.
Calling flip() sets the position back to 0, and sets the limit to where position just was.&lt;/p&gt;

&lt;h3 id=&#34;8-reading-data-from-a-buffer&#34;&gt;8. Reading Data from a Buffer&lt;/h3&gt;

&lt;p&gt;There are two ways you can read data from a Buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Read data from the buffer into a channel.
//read from buffer into channel.
int bytesWritten = inChannel.write(buf);

Read data from the buffer yourself, using one of the get() methods.
byte aByte = buf.get();    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-rewind&#34;&gt;9. rewind&lt;/h3&gt;

&lt;p&gt;The Buffer.rewind() sets the position back to 0, so you can reread all the data in the buffer.&lt;/p&gt;

&lt;p&gt;The limit remains untouched, thus still marking how many elements (bytes, chars etc.) that can be read from the Buffer.&lt;/p&gt;

&lt;h3 id=&#34;10-clear-and-compact&#34;&gt;10. clear() and compact()&lt;/h3&gt;

&lt;p&gt;Once you are done reading data out of the Buffer you have to make the Buffer ready for writing again. You can do so either by calling clear() or by calling compact().&lt;/p&gt;

&lt;p&gt;If you call clear() the position is set back to 0 and the limit to capacity. In other words, the Buffer is cleared.
The data in the Buffer is not cleared. Only the markers telling where you can write data into the Buffer are.&lt;/p&gt;

&lt;p&gt;compact() copies all unread data to the beginning of the Buffer. Then it sets position to right after the last unread element.
The limit property is still set to capacity, just like clear() does. Now the Buffer is ready for writing, but you will not overwrite the unread data.&lt;/p&gt;

&lt;h3 id=&#34;11-mark-and-reset&#34;&gt;11. mark() and reset()&lt;/h3&gt;

&lt;p&gt;You can mark a given position in a Buffer by calling the Buffer.mark() method. You can then later reset the position back to the marked position by calling the Buffer.reset() method. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buffer.mark();

//call buffer.get() a couple of times, e.g. during parsing.

buffer.reset();  //set position back to mark.    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;五-java-nio-scatter-gather&#34;&gt;五、Java NIO Scatter / Gather&lt;/h2&gt;

&lt;p&gt;javaNIO自带了Scatter/gather的支持，用于从Channel读数据和写数据。&lt;/p&gt;

&lt;p&gt;scattering read from a channel：从channel读数据到不止一个Buffer，所以会 &amp;ldquo;scatters&amp;rdquo; the data from the channel into multiple buffers.&lt;/p&gt;

&lt;p&gt;gathering write to a channel: 从多个 buffer 写到一个Channel，多疑 &amp;ldquo;gathers&amp;rdquo; the data from multiple buffers into one channel。&lt;/p&gt;

&lt;h3 id=&#34;1-scattering-reads&#34;&gt;1. Scattering Reads&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ByteBuffer header = ByteBuffer.allocate(128);
ByteBuffer body   = ByteBuffer.allocate(1024);

ByteBuffer[] bufferArray = { header, body };

channel.read(bufferArray);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public static void scatter() throws Exception {

        RandomAccessFile aFile = new RandomAccessFile(&amp;quot;src/main/resources/data/nio-data.txt&amp;quot;, &amp;quot;rw&amp;quot;);

        FileChannel inChannel = aFile.getChannel();


        ByteBuffer header = ByteBuffer.allocate(128);
        ByteBuffer body   = ByteBuffer.allocate(1028);

        ByteBuffer[] bufferArray = { header, body };

        long bytesRead = inChannel.read(bufferArray);

        System.out.println(&amp;quot;Read &amp;quot; + bytesRead);
        header.flip();
        body.flip();

        while(header.hasRemaining()){
            System.out.print((char) header.get());
        }
        while(body.hasRemaining()){
            System.out.print((char) body.get());
        }

        header.clear();
        body.clear();


        aFile.close();

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fact that scattering reads fill up one buffer before moving on to the next, means that it is not suited for dynamically sized message parts.&lt;/p&gt;

&lt;h3 id=&#34;2-gathering-writes&#34;&gt;2. Gathering Writes&lt;/h3&gt;

&lt;p&gt;Here is a code example that shows how to perform a gathering write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ByteBuffer header = ByteBuffer.allocate(128);
ByteBuffer body   = ByteBuffer.allocate(1024);

//write data into buffers

ByteBuffer[] bufferArray = { header, body };

channel.write(bufferArray);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行下面的代码，会得到一个文件，里面是 header+body&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void gather() throws Exception {

        RandomAccessFile aFile = new RandomAccessFile(&amp;quot;src/main/resources/data/nio-in.txt&amp;quot;, &amp;quot;rw&amp;quot;);

        FileChannel inChannel = aFile.getChannel();

        ByteBuffer header = ByteBuffer.allocate(12);

        header.put(&amp;quot;header&amp;quot;.getBytes());
        header.put(&amp;quot;body&amp;quot;.getBytes());
        ByteBuffer body   = ByteBuffer.allocate(120);

        ByteBuffer[] bufferArray = { header, body };

        header.flip();
        body.flip();
        inChannel.write(bufferArray);

        inChannel.force(true);
        inChannel.close();
        header.clear();
        body.clear();

        aFile.close();

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;四-java-nio-channel-to-channel-transfers&#34;&gt;四、Java NIO Channel to Channel Transfers&lt;/h2&gt;

&lt;p&gt;channel的传输工具，类似IOUtils&lt;/p&gt;

&lt;h3 id=&#34;1&#34;&gt;1.&lt;/h3&gt;

&lt;p&gt;The FileChannel.transferFrom() method transfers data from a source channel into the FileChannel. Here is a simple example: transferFrom()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
RandomAccessFile fromFile = new RandomAccessFile(&amp;quot;fromFile.txt&amp;quot;, &amp;quot;rw&amp;quot;);
FileChannel      fromChannel = fromFile.getChannel();

RandomAccessFile toFile = new RandomAccessFile(&amp;quot;toFile.txt&amp;quot;, &amp;quot;rw&amp;quot;);
FileChannel      toChannel = toFile.getChannel();

long position = 0;
long count    = fromChannel.size();

toChannel.transferFrom(fromChannel, position, count);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters position and count, tell where in the destination file to start writing (position), and how many bytes to transfer maximally (count). If the source channel has fewer than count bytes, less is transfered.&lt;/p&gt;

&lt;p&gt;Additionally, some SocketChannel implementations may transfer only the data the SocketChannel has ready in its internal buffer here and now - even if the SocketChannel may later have more data available. Thus, it may not transfer the entire data requested (count) from the SocketChannel into FileChannel.&lt;/p&gt;

&lt;h3 id=&#34;2&#34;&gt;2.&lt;/h3&gt;

&lt;p&gt;The transferTo() method transfer from a FileChannel into some other channel. Here is a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;RandomAccessFile fromFile = new RandomAccessFile(&amp;quot;fromFile.txt&amp;quot;, &amp;quot;rw&amp;quot;);
FileChannel      fromChannel = fromFile.getChannel();

RandomAccessFile toFile = new RandomAccessFile(&amp;quot;toFile.txt&amp;quot;, &amp;quot;rw&amp;quot;);
FileChannel      toChannel = toFile.getChannel();

long position = 0;
long count    = fromChannel.size();

fromChannel.transferTo(position, count, toChannel);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how similar the example is to the previous. The only real difference is the which FileChannel object the method is called on. The rest is the same.&lt;/p&gt;

&lt;p&gt;The issue with SocketChannel is also present with the transferTo() method. The SocketChannel implementation may only transfer bytes from the FileChannel until the send buffer is full, and then stop.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-nio/selectors.html&#34;&gt;http://tutorials.jenkov.com/java-nio/selectors.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-selectors&#34;&gt;四、Selectors&lt;/h2&gt;

&lt;p&gt;NIO&amp;rsquo;s Selectors 允许一个 a single thread 去 monitor multiple channels of input。
你可以注册 multiple channels with a selector，然后用一个线程去 &amp;ldquo;select&amp;rdquo; the channels that have input available for processing,
或者 or select the channels that are ready for writing。
This selector mechanism makes it easy for a single thread to manage multiple channels.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>虚拟机性能监控工具</title>
      <link>https://dengziming.github.io/post/java/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</guid>
      
        <description>

&lt;p&gt;定位问题知识、经验是关键，工具也是必要的，但是要注意工具知识工具，对知识的封装，不可能包治百病。
java的bin目录下处理java和javac是常用工具，但是还有一些其他的工具。jdk官方说的是这些不一定可靠，但是实际上这些最可靠了。&lt;/p&gt;

&lt;h2 id=&#34;一-介绍&#34;&gt;一、介绍&lt;/h2&gt;

&lt;p&gt;工具都在bin 目录下，&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://dengziming.github.io/post/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      
        <description>

&lt;h2 id=&#34;一-过滤器模式&#34;&gt;一、过滤器模式&lt;/h2&gt;

&lt;p&gt;过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。&lt;/p&gt;

&lt;p&gt;mongo 的查询接口有很多方法，例如 and，or，实际上就是串在一起。&lt;/p&gt;

&lt;h2 id=&#34;二-组合模式&#34;&gt;二、组合模式&lt;/h2&gt;

&lt;p&gt;树枝内部组合该接口，并且含有内部属性 List，里面放 Component。叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Employee {
   private String name;
   private String dept;
   private int salary;
   private List&amp;lt;Employee&amp;gt; subordinates;
 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;三-装饰器模式&#34;&gt;三、装饰器模式&lt;/h2&gt;

&lt;p&gt;类似适配器，代理，桥接&lt;/p&gt;

&lt;p&gt;java 的 IO 包就是典型代表&lt;/p&gt;

&lt;h2 id=&#34;四-外观模式&#34;&gt;四、外观模式&lt;/h2&gt;

&lt;p&gt;为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。不符合开放封闭原则，如果要改东西很麻烦。&lt;/p&gt;

&lt;h2 id=&#34;五-桥接模式&#34;&gt;五、桥接模式&lt;/h2&gt;

&lt;p&gt;抽象类依赖实现类。&lt;/p&gt;

&lt;h2 id=&#34;六-责任链模式&#34;&gt;六、责任链模式&lt;/h2&gt;

&lt;p&gt;拦截器模式：以 Logger 为例，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public abstract class AbstractLogger {
protected AbstractLogger nextLogger;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;七-观察者模式&#34;&gt;七、观察者模式&lt;/h2&gt;

&lt;p&gt;微博动态可以设计成观察者模式，每个人记录自己的观察者，发送的时候通知。&lt;/p&gt;

&lt;h2 id=&#34;八-策略模式&#34;&gt;八、策略模式&lt;/h2&gt;

&lt;p&gt;诸葛亮的锦囊妙计，每一个锦囊就是一个策略。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>面向对象经验</title>
      <link>https://dengziming.github.io/post/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/oop/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/oop/</guid>
      
        <description>&lt;p&gt;用面向对象方法开发软件，通常需要建立3种形式的模型它们分别是：描述系统数据结构的对象模型、描述系统控制结构的动态模型和描述系统功能的功能模型。&lt;/p&gt;

&lt;p&gt;面向对象的软件工程主要包括以下部分：&lt;/p&gt;

&lt;p&gt;1) 面向对象分析（object oriented analysis，OOA）;&lt;/p&gt;

&lt;p&gt;2) 面向对象设计（object oriented design，OOD）;&lt;/p&gt;

&lt;p&gt;3) 面向对象编程（object oriented programming，OOP）;&lt;/p&gt;

&lt;p&gt;4) 面向对象测试（object oriented test，OOT）;&lt;/p&gt;

&lt;p&gt;5) 面向对象维护（object oriented soft maintenance,OOSM）;&lt;/p&gt;

&lt;p&gt;源码分析统计扫描所有代码并且展示类之间的关系。市场上有很多设备与工具。比如：Architexa， AgileJ， UModel， Poseidon等。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>