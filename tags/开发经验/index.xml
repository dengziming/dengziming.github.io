<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发经验 on 数据分析师之旅</title>
    <link>https://dengziming.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/</link>
    <description>Recent content in 开发经验 on 数据分析师之旅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Mar 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dengziming.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何在github.io搭建Hugo博客</title>
      <link>https://dengziming.github.io/post/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dengziming.github.io/post/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      
        <description>

&lt;h2 id=&#34;一-过滤器模式&#34;&gt;一、过滤器模式&lt;/h2&gt;

&lt;p&gt;过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。&lt;/p&gt;

&lt;p&gt;mongo 的查询接口有很多方法，例如 and，or，实际上就是串在一起。&lt;/p&gt;

&lt;h2 id=&#34;二-组合模式&#34;&gt;二、组合模式&lt;/h2&gt;

&lt;p&gt;树枝内部组合该接口，并且含有内部属性 List，里面放 Component。叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Employee {
   private String name;
   private String dept;
   private int salary;
   private List&amp;lt;Employee&amp;gt; subordinates;
 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;三-装饰器模式&#34;&gt;三、装饰器模式&lt;/h2&gt;

&lt;p&gt;类似适配器，代理，桥接&lt;/p&gt;

&lt;p&gt;java 的 IO 包就是典型代表&lt;/p&gt;

&lt;h2 id=&#34;四-外观模式&#34;&gt;四、外观模式&lt;/h2&gt;

&lt;p&gt;为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。不符合开放封闭原则，如果要改东西很麻烦。&lt;/p&gt;

&lt;h2 id=&#34;五-桥接模式&#34;&gt;五、桥接模式&lt;/h2&gt;

&lt;p&gt;抽象类依赖实现类。&lt;/p&gt;

&lt;h2 id=&#34;六-责任链模式&#34;&gt;六、责任链模式&lt;/h2&gt;

&lt;p&gt;拦截器模式：以 Logger 为例，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public abstract class AbstractLogger {
protected AbstractLogger nextLogger;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;七-观察者模式&#34;&gt;七、观察者模式&lt;/h2&gt;

&lt;p&gt;微博动态可以设计成观察者模式，每个人记录自己的观察者，发送的时候通知。&lt;/p&gt;

&lt;h2 id=&#34;八-策略模式&#34;&gt;八、策略模式&lt;/h2&gt;

&lt;p&gt;诸葛亮的锦囊妙计，每一个锦囊就是一个策略。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>